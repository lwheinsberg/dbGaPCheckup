[{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"copyright-information","dir":"Articles","previous_headings":"","what":"Copyright information","title":"dbGaPCheckup Quick Start","text":"Copyright 2022, University Pittsburgh. Rights Reserved. License: GPL-2","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"dbGaPCheckup Quick Start","text":"install CRAN use: install development version GitHub use:","code":"install.packages(\"dbGaPCheckup\") devtools::install_github(\"lwheinsberg/dbGaPCheckup/pkg\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick start","title":"dbGaPCheckup Quick Start","text":"document designed provide “quick start” guidance using dbGaPCheckUp R package. Please see table dbGaPCheckup_vignette detailed information. List function names types.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"dbGaPCheckup Quick Start","text":"dbGaPCheckup package installed, can load R package using command: library(dbGaPCheckup) proceed follows: Read data DS.data; Read data dictionary DD.dict; Run function check_report, optionally defining missing value codes (e.g., -9999) via non.NA.missing.codes argument. Note, see , package requires several fields beyond required dbGaP formatting requirements. Specifically, data dictionary required also MIN, MAX, TYPE fields. data dictionary include fields already, can use add_missing_fields function auto fill (see ).","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"load-the-dbgapcheckup-r-package","dir":"Articles","previous_headings":"5 Example usage","what":"Load the dbGaPCheckup R package","title":"dbGaPCheckup Quick Start","text":"","code":"library(dbGaPCheckup)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"read-in-your-subject-phenotype-data-into-ds-data-","dir":"Articles","previous_headings":"5 Example usage","what":"Read in your Subject Phenotype data into DS.data.","title":"dbGaPCheckup Quick Start","text":"","code":"DS.path <- system.file(\"extdata\", \"DS_Example.txt\",    package = \"dbGaPCheckup\", mustWork=TRUE) DS.data <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"read-in-your-subject-phenotype-data-dictionary-into-dd-dict-","dir":"Articles","previous_headings":"5 Example usage","what":"Read in your Subject Phenotype data dictionary into DD.dict.","title":"dbGaPCheckup Quick Start","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2f.xlsx\",    package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict <- readxl::read_xlsx(DD.path) #> New names: #> • `` -> `...15` #> • `` -> `...16` #> • `` -> `...17` #> • `` -> `...18` #> • `` -> `...19`"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"run-the-function-check_report-","dir":"Articles","previous_headings":"5 Example usage","what":"Run the function check_report.","title":"dbGaPCheckup Quick Start","text":"many functions, specification missing value codes important accurate results.","code":"report <- check_report(DD.dict = DD.dict, DS.data = DS.data, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Failed        ERROR: not all package-level required fiel… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Passed        Passed: the variable names match between t… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check pkg_field_check … #>  8 type_check          Failed        ERROR: TYPE column not found. Consider usi… #>  9 values_check        Not attempted ERROR: Required pre-check type_check faile… #> 10 integer_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 11 decimal_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 12 misc_format_check   Passed        Passed: no check-specific formatting issue… #> 13 description_check   Failed        ERROR: missing and duplicate descriptions … #> 14 minmax_check        Not attempted ERROR: Required pre-check pkg_field_check … #> 15 missing_value_check Not attempted ERROR: Required pre-check pkg_field_check … #> -------------------- #> pkg_field_check: Failed  #> ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.  #> $pkg_field_check.Info #>  TYPE   MIN   MAX  #> FALSE FALSE FALSE  #>  #> -------------------- #> type_check: Failed  #> ERROR: TYPE column not found. Consider using the add_missing_fields function to autofill TYPE.  #> $type_check.Info #> [1] \"ERROR: TYPE column not found.\" #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT NA                    #> 2 REACT    NA                    #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"if-needed-run-the-function-add_missing_fields-and-repeat-check_report","dir":"Articles","previous_headings":"5 Example usage > 5.4 Run the function check_report.","what":"If needed, run the function add_missing_fields and repeat check_report","title":"dbGaPCheckup Quick Start","text":"described detail dbGaPCheckup_vignette vignette, checks contain embedded “pre-checks” must passed check can run. example, mentioned , package requires MIN, MAX, TYPE fields data dictionary. created function auto fill fields can used get along checks. fields added, can return run checks. Now see 13 15 checks pass, workflow fails description_check missing_value_check. Specifically, description_check see variables PREGNANT REACT identified missing variable descriptions (VARDESC), variables HEIGHT WEIGHT incorrectly identical descriptions. missing_value_check, see variable CUFFSIZE contains -9999 encoded value specified VALUES column. included functions support “simple fixes”, issues identified need corrected manually data dictionary moving .","code":"DD.dict.updated <- add_missing_fields(DD.dict, DS.data) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\" report.v2 <- check_report(DD.dict = DD.dict.updated , DS.data = DS.data, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Failed ERROR: missing and duplicate descriptions found i… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT NA                    #> 2 REACT    NA                    #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 16 CUFFSIZE -9999    <NA> FALSE #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"reporting","dir":"Articles","previous_headings":"5 Example usage","what":"Reporting","title":"dbGaPCheckup Quick Start","text":"Note also created reporting functions generate graphical textual descriptions awareness checks data HTML format (see dbGaPCheckup_vignette vignette: create_awareness_report (Appendix ) create_report (Appendix B) details). reports designed help catch potential errors data set. Note create_report generated quite long however, recommend submit subsets variables time. Specification missing value codes also important effective plotting. details execution interpretation provided dbGaPCheckup_vignette vignette.","code":"# Functions not run here as they work best when initiated interactively # Awareness Report (See Appendix A of the `dbGaPCheckup` vignette) create_awareness_report(DD.dict.updated, DS.data, non.NA.missing.codes=c(-9999, -4444),    output.path= tempdir())     # Data Report (See Appendix B of the `dbGaPCheckup` vignette) create_report(DD.dict.updated, DS.data, sex.split=TRUE, sex.name= \"SEX\",    start = 3, end = 7, non.NA.missing.codes=c(-9999,-4444),    output.path= tempdir(), open.html=TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"labelled-data","dir":"Articles","previous_headings":"5 Example usage","what":"Labelled data","title":"dbGaPCheckup Quick Start","text":"data dictionary fully consistent data, can use label_data function convert data labelled data, essentially embedding data dictionary data future use!","code":"DS_labelled_data <- label_data(DD.dict.updated, DS.data, non.NA.missing.codes=c(-9999)) labelled::var_label(DS_labelled_data$SEX) #> [1] \"Sex assigned at birth\" labelled::val_labels(DS_labelled_data$SEX) #>   male female  #>      0      1 attributes(DS_labelled_data$SEX) #> $labels #>   male female  #>      0      1  #>  #> $label #> [1] \"Sex assigned at birth\" #>  #> $class #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"integer\"        #>  #> $TYPE #> [1] \"integer, encoded value\" labelled::na_values(DS_labelled_data$HX_DEPRESSION) #> missing value  #>         -9999"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"contact-information","dir":"Articles","previous_headings":"","what":"Contact information","title":"dbGaPCheckup Quick Start","text":"questions comments, please feel free contact us! Lacey W. Heinsberg: law145@pitt.edu Daniel E. Weeks: weeks@pitt.edu Bug reports: https://github.com/lwheinsberg/dbGaPCheckup/issues","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"dbGaPCheckup Quick Start","text":"package developed partial support National Institutes Health award numbers R01HL093093, R01HL133040, K99HD107030. eval_function dat_function functions form backbone awareness reports inspired elegant 2016 homework answer submitted Tanbin Rahman HUGEN 2070 course ‘Bioinformatics Human Genetics’. also like thank Nick Moshgat testing providing feedback package development.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"copyright-information","dir":"Articles","previous_headings":"","what":"Copyright information","title":"dbGaPCheckup Vignette","text":"Copyright 2022, University Pittsburgh. Rights Reserved. License: GPL-2","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"dbGaPCheckup Vignette","text":"document describes R package, dbGaPCheckup, implements series check, awareness, utility, reporting functions help ensure scientific data set meets formatting requirements submission National Library Medicine’s database Genotypes Phenotypes (dbGaP). vignette designed give broad overview utility R package. complete table functions descriptions shown . See Quick Start (dbGaPCheckup) vignette brief introduction package. List function names types.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"dbGaPCheckup Vignette","text":"package written R language. install CRAN, proceed follows: install development version GitHub, proceed follows: Install load devtools package issuing commands: Install load dbGaPCheckup issuing commands: wish vignette installed accessible within R help pages, use command instead: install_github(\"lwheinsberg/dbGaPCheckup/pkg\", build_opts = c(\"---resave-data\", \"---manual\"), build_vignettes = TRUE) dbGaPCheckup package installed, can view load package using command: view vignette using: browseVignettes(\"dbGaPCheckup\")","code":"install.packages(\"dbGaPCheckup\") install.packages(\"devtools\") library(devtools) install_github(\"lwheinsberg/dbGaPCheckup/pkg\") library(dbGaPCheckup)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"data-format-file-types-and-file-names","dir":"Articles","previous_headings":"","what":"Data format, file types, and file names","title":"dbGaPCheckup Vignette","text":"dbGaP host formatting requirements data set submission. package focuses two required files: Subject Phenotype data set (DS) corresponding Subject Phenotype data dictionary (DD). Brief instructions setting files included .","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"files","dir":"Articles","previous_headings":"4 Data format, file types, and file names","what":"Files","title":"dbGaPCheckup Vignette","text":"Checks currently embedded package want draw special attention include: may submit tab-delimited .txt .xlsx files. –> Tab-delimited txt files preferable data set. –> Excel (.xlsx) format preferable data dictionary. File names contain special characters, spaces, hyphens, brackets, periods, forward (/) backward slashes (). –> example, ‘data.set.txt’, ‘data-set.txt’, ‘data set.txt’ illegal names, ‘data_set.txt’ OK. Excel files allowed one sheet (.e., multiple tabs/sheets allowed).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"subject-phenotype-data-set-ds","dir":"Articles","previous_headings":"4 Data format, file types, and file names","what":"Subject Phenotype Data Set (DS)","title":"dbGaPCheckup Vignette","text":"brief, Subject Phenotype data set consists study data participants. data set, row represents participant, column represents study variable. first column data set needs labled SUBJECT_ID contains unique participant identifier integer string value. Integers zero padding spaces. Specifically, following characters can included ID: English letters, Arabic numerals, period (.), hyphen (-), underscore (_), symbol (@), pound sign (#). Columns falling SUBJECT_ID unique given study, include participant factors age, sex, etc. Formatting example data set shown . First six lines example dbGaP data set. example data set provided dbGaP can found NCBI submission guide. See “Example Subject Phenotypes DS File” “6a_SampleAttributes_DS.txt”.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"subject-phenotype-data-dictionary-dd","dir":"Articles","previous_headings":"4 Data format, file types, and file names","what":"Subject Phenotype Data Dictionary (DD)","title":"dbGaPCheckup Vignette","text":"Subject Phenotype data dictionary, row represents unique variable (corresponds columns data set), column represents information variable (see example ). detailed data dictionary formatting instructions, visit NCBI submission guide see heading “APPENDIX Data Dictionary (DD) File Descriptions Specifications”, includes table required suggested column headers descriptions, well example file called “6b_SampleAttributes_DD.xlsx”. First six lines example dbGaP data dictionary. Two special data dictionary formatting notes: final columns data dictionary list unique values/meanings encoded values, one value per cell, vary based number VALUE codes specific variable. example, data set contains variable called SEX 0 indicates female 1 indicates male, columns designed communicate value=meaning (e.g., 0=female). VALUES header must last column header appear column FIRST encoded value listed. remaining value column header cells left blank. (Note read example data set blank column names VALUES, R automatically fills column names column number (e.g., ...18, ...19, etc.). acceptable package level checks, allowable files submitted dbGaP.) package requires several fields beyond required dbGaP formatting requirements. Specifically, dbGaP requires data dictionary contains following fields: variable name (VARNAME); variable description (VARDESC); units (UNITS); variable value meaning (VALUE). package designed perform dbGaP formatting requirement checks, well series awareness checks help ensure data accuracy, package also requires data dictionary contains following additional fields: minimum (MIN) maximum (MAX) values (allowed left blank, column headers required) data type (e.g., integer, decimal, encoded value, string; TYPE) fields. data dictionary include additional fields already, can simply use add_missing_fields function auto fill (see ).","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-utility-and-awareness-functions","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation","what":"Check, utility, and awareness functions","title":"dbGaPCheckup Vignette","text":"Note “check” functions included package return invisible tibble contains (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified). designed streamline complete workflow approach return succinct report back via check_report (see ). Note dependencies checks (e.g., name_check values_check dependent upon field_check), pre-checks embedded within many checks.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-1","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 1","title":"dbGaPCheckup Vignette","text":"recommend starting check_report function, includes 15 embedded checks. Note functions, need first specify name data dictionary, followed name data set. check, see several checks passed (e.g., field_check), failed (e.g., type_check), attempted pre-check function failed (e.g., missing_value_check). check_report output can examined better understand issues hand. example, let’s examine pkg_field_check results closely. can call detailed information check using following commands: , see TYPE, MIN, MAX columns required complete workflow approach package missing. never fear - can simply use add_missing_fields function add ! Now error corrected, let’s return check_report. Don’t forget call updated version data dictionary ! can see, now 13 15 checks pass, workflow fails description_check missing_value_check. Specifically, description_check see variables PREGNANT REACT identified missing variable descriptions (VARDESC), variables HEIGHT WEIGHT incorrectly identical descriptions. missing_value_check, see variable CUFFSIZE contains -9999 encoded value specified VALUES column. included several functions support “quick fixes” (add_missing_fields, name_correct, reorder_dictionary, reorder_data, id_first_data, id_first_dict), issues identified bit complex study-specific, need corrected manually data dictionary moving . now, leave example move next one!","code":"data(ExampleD) e1_report <- check_report(DD.dict.D, DS.data.D, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Failed        ERROR: not all package-level required fiel… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Passed        Passed: the variable names match between t… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check pkg_field_check … #>  8 type_check          Failed        ERROR: TYPE column not found. Consider usi… #>  9 values_check        Not attempted ERROR: Required pre-check type_check faile… #> 10 integer_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 11 decimal_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 12 misc_format_check   Passed        Passed: no check-specific formatting issue… #> 13 description_check   Failed        ERROR: missing and duplicate descriptions … #> 14 minmax_check        Not attempted ERROR: Required pre-check pkg_field_check … #> 15 missing_value_check Not attempted ERROR: Required pre-check pkg_field_check … #> -------------------- #> pkg_field_check: Failed  #> ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.  #> $pkg_field_check.Info #>  TYPE   MIN   MAX  #> FALSE FALSE FALSE  #>  #> -------------------- #> type_check: Failed  #> ERROR: TYPE column not found. Consider using the add_missing_fields function to autofill TYPE.  #> $type_check.Info #> [1] \"ERROR: TYPE column not found.\" #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT NA                    #> 2 REACT    NA                    #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> -------------------- e1_report$Message[2] #> [1] \"ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.\" e1_report$Information$pkg_field_check.Info #>  TYPE   MIN   MAX  #> FALSE FALSE FALSE DD.dict_updated <- add_missing_fields(DD.dict.D, DS.data.D) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\" e1_report.v2 <- check_report(DD.dict_updated, DS.data.D, non.NA.missing.codes=c(-4444, -9999)) # Note! Don't forget to call in the updated version of the data dictionary here!  #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Failed ERROR: missing and duplicate descriptions found i… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT NA                    #> 2 REACT    NA                    #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 16 CUFFSIZE -9999    <NA> FALSE #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-2","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 2","title":"dbGaPCheckup Vignette","text":"example 2, see first three checks (field_check, pkg_field_check, dimension_check) several others workflow pass, fourth check (name_check) fails. Looking check_report output closely, see two variables names match data dictionary data set. move investigate issue , please note arrive conclusion using functions individually (rather complete workflow approach implemented check_report): looking closely name_check output, see , “intent” names match (.e., “hx” sometimes used shorthand “history”), couple discrepancies data dictionary data set. Luckily, included “quick fix” simple issue implemented name_correct function can continue working checks. Specifically, name_correct updates names DS match names listed data dictionary. Similarly, variable names data dictionary data set matched identically, wrong order, reorder_dictionary function used create new version data dictionary match order presented data set! Back example hand, though – let’s give name_correct function try now! Now error corrected, let’s return check_report. Similar , sure call updated data set! now see name_check now passes, along several functions workflow, failed values_check several others. Investigating check failure looking check_report output, see issues , due subjectivity complexity different data set, need manually corrected moving . purposes tutorial, now leave data set move new one, reality, correct issue return check_report.","code":"data(ExampleL) e2_report <- check_report(DD.dict.L, DS.data.L)  #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Passed        Passed: package-level required fields TYPE… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Failed        ERROR: the variable names DO NOT match bet… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check name_check faile… #>  8 type_check          Passed        Passed: All TYPE entries found are accepte… #>  9 values_check        Failed        ERROR: at least one VALUES check flagged p… #> 10 integer_check       Not attempted ERROR: Required pre-check name_check faile… #> 11 decimal_check       Not attempted ERROR: Required pre-check name_check faile… #> 12 misc_format_check   Failed        ERROR: at least one check failed.           #> 13 description_check   Failed        ERROR: missing and duplicate descriptions … #> 14 minmax_check        Not attempted ERROR: Required pre-check name_check faile… #> 15 missing_value_check Not attempted ERROR: Required pre-check name_check faile… #> -------------------- #> name_check: Failed  #> ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.  #> $name_check.Info #> # A tibble: 2 × 2 #>   Data                Dict                  #>   <chr>               <chr>                 #> 1 Data: SMOKING_HX    Dict: SMOKING_HISTORY #> 2 Data: HX_DEPRESSION Dict: DEPRESSION_HX   #>  #> -------------------- #> values_check: Failed  #> ERROR: at least one VALUES check flagged potentials issues. See Information for more details.  #> $values_check.Info #>    column_name values.check            vname                   type #> 4      VALUES3        FALSE         CUFFSIZE integer, encoded value #> 6       VALUES        FALSE              HTN integer, encoded value #> 7       VALUES        FALSE PERCEIVED_HEALTH integer, encoded value #> 9      VALUES5        FALSE               28 integer, encoded value #> 10     VALUES4        FALSE               28 integer, encoded value #> 12     VALUES2        FALSE               16 integer, encoded value #> 14      VALUES        FALSE           RESIST integer, encoded value #> 15      VALUES        FALSE        SAMPLE_ID                integer #> 16      VALUES        FALSE              SEX                integer #>                                                   problematic_description #> 4                                                           2 means large #> 6                                                          0 indicates no #> 7  Between 1 and 10 with higher values indicating better perceived health #> 9                                                        5 = a great deal #> 10                                                        4 = quite a bit #> 12                                                              1 =medium #> 14                                                                   <NA> #> 15                                                    -9999=missing value #> 16                                                                 0=male #>                                                                         check #> 4                  Check 1: Is an equals sign present for all values columns? #> 6                  Check 1: Is an equals sign present for all values columns? #> 7                  Check 1: Is an equals sign present for all values columns? #> 9  Check 2: Are there any leading/trailing spaces near the first equals sign? #> 10 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 12 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 14  Check 3: Do all variables of TYPE encoded have at least one VALUES entry? #> 15            Check 4: Are all variables with VALUES entries of TYPE encoded? #> 16            Check 4: Are all variables with VALUES entries of TYPE encoded? #>  #> -------------------- #> misc_format_check: Failed  #> ERROR: at least one check failed.  #> $misc_formatting_check.Info #> # A tibble: 7 × 6 #>   check.name check.description                   check…¹ details col.n…² correct #>   <chr>      <chr>                               <chr>   <chr>   <chr>   <lgl>   #> 1 Check 1    Duplicate variable name check       Passed  NA      NA      NA      #> 2 Check 2    Check for use of `dbgap` in variab… Passed  NA      NA      NA      #> 3 Check 4    Column names after `VALUES` should… Failed  NA      VALUES2 FALSE   #> 4 Check 4    Column names after `VALUES` should… Failed  NA      VALUES3 FALSE   #> 5 Check 4    Column names after `VALUES` should… Failed  NA      VALUES4 FALSE   #> 6 Check 4    Column names after `VALUES` should… Failed  NA      VALUES5 FALSE   #> 7 Check 4    Column names after `VALUES` should… Failed  NA      VALUES6 FALSE   #> # … with abbreviated variable names ¹​check.status, ²​col.name #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 2 × 2 #>   VARNAME  VARDESC #>   <chr>    <chr>   #> 1 PREGNANT NA      #> 2 REACT    NA      #>  #> -------------------- field_check(DD.dict.L) # pass #> $Message #> [1] \"Passed: required fields VARNAME, VARDESC, UNITS, and VALUES present in the data dictionary.\" pkg_field_check(DD.dict.L) # pass #> $Message #> [1] \"Passed: package-level required fields TYPE, MIN, and MAX present in the data dictionary.\" dimension_check(DD.dict.L, DS.data.L) # pass #> $Message #> [1] \"Passed: the variable count matches between the data dictionary and the data.\" #>  #> $Information #> Variables in dictionary       Variables in data  #>                      30                      30 name_check(DD.dict.L, DS.data.L) # failed #> $Message #> [1] \"ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.\" #>  #> $Information #> # A tibble: 2 × 2 #>   Data                Dict                  #>   <chr>               <chr>                 #> 1 Data: SMOKING_HX    Dict: SMOKING_HISTORY #> 2 Data: HX_DEPRESSION Dict: DEPRESSION_HX DS.data_updated <- name_correct(DD.dict.L, DS.data.L) #> $Message #> [1] \"CORRECTED ERROR: the variable names differ between the data dictionary and the data. **ALERT** Renaming variable(s) to match those listed in the data dictionary.\" #>  #> $Information #> # A tibble: 2 × 3 #>   Data                              Dict                             New.Data    #>   <chr>                             <chr>                            <chr>       #> 1 Original data name: SMOKING_HX    Dictionary name: SMOKING_HISTORY New data n… #> 2 Original data name: HX_DEPRESSION Dictionary name: DEPRESSION_HX   New data n… e2_report.v2 <- check_report(DD.dict.L, DS.data_updated, non.NA.missing.codes=c(-4444, -9999)) # Calling in updated data set #> Warning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [3]. #> Warning: Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [1]. #> Expected 2 pieces. Missing pieces filled with `NA` in 1 rows [1]. #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Failed ERROR: at least one VALUES check flagged potentia… #> 10 integer_check       Failed ERROR: some variables listed as TYPE integer do n… #> 11 decimal_check       Failed ERROR: some variables listed as TYPE decimal do n… #> 12 misc_format_check   Failed ERROR: at least one check failed.                  #> 13 description_check   Failed ERROR: missing and duplicate descriptions found i… #> 14 minmax_check        Failed ERROR: some variables have values outside of the … #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> values_check: Failed  #> ERROR: at least one VALUES check flagged potentials issues. See Information for more details.  #> $values_check.Info #>    column_name values.check            vname                   type #> 4      VALUES3        FALSE         CUFFSIZE integer, encoded value #> 6       VALUES        FALSE              HTN integer, encoded value #> 7       VALUES        FALSE PERCEIVED_HEALTH integer, encoded value #> 9      VALUES5        FALSE               28 integer, encoded value #> 10     VALUES4        FALSE               28 integer, encoded value #> 12     VALUES2        FALSE               16 integer, encoded value #> 14      VALUES        FALSE           RESIST integer, encoded value #> 15      VALUES        FALSE        SAMPLE_ID                integer #> 16      VALUES        FALSE              SEX                integer #>                                                   problematic_description #> 4                                                           2 means large #> 6                                                          0 indicates no #> 7  Between 1 and 10 with higher values indicating better perceived health #> 9                                                        5 = a great deal #> 10                                                        4 = quite a bit #> 12                                                              1 =medium #> 14                                                                   <NA> #> 15                                                    -9999=missing value #> 16                                                                 0=male #>                                                                         check #> 4                  Check 1: Is an equals sign present for all values columns? #> 6                  Check 1: Is an equals sign present for all values columns? #> 7                  Check 1: Is an equals sign present for all values columns? #> 9  Check 2: Are there any leading/trailing spaces near the first equals sign? #> 10 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 12 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 14  Check 3: Do all variables of TYPE encoded have at least one VALUES entry? #> 15            Check 4: Are all variables with VALUES entries of TYPE encoded? #> 16            Check 4: Are all variables with VALUES entries of TYPE encoded? #>  #> -------------------- #> integer_check: Failed  #> ERROR: some variables listed as TYPE integer do not appear to be integers.  #> $integer_check.Info #> [1] \"BP_DIASTOLIC\"    \"SMOKING_HISTORY\" #>  #> -------------------- #> decimal_check: Failed  #> ERROR: some variables listed as TYPE decimal do not appear to be decimals.  #> $decimal_check.Info #> [1] \"ABD_SKF\" \"SUP_SKF\" #>  #> -------------------- #> misc_format_check: Failed  #> ERROR: at least one check failed.  #> $misc_formatting_check.Info #> # A tibble: 7 × 6 #>   check.name check.description                   check…¹ details col.n…² correct #>   <chr>      <chr>                               <chr>   <chr>   <chr>   <lgl>   #> 1 Check 1    Duplicate variable name check       Passed  NA      NA      NA      #> 2 Check 2    Check for use of `dbgap` in variab… Passed  NA      NA      NA      #> 3 Check 4    Column names after `VALUES` should… Failed  NA      VALUES2 FALSE   #> 4 Check 4    Column names after `VALUES` should… Failed  NA      VALUES3 FALSE   #> 5 Check 4    Column names after `VALUES` should… Failed  NA      VALUES4 FALSE   #> 6 Check 4    Column names after `VALUES` should… Failed  NA      VALUES5 FALSE   #> 7 Check 4    Column names after `VALUES` should… Failed  NA      VALUES6 FALSE   #> # … with abbreviated variable names ¹​check.status, ²​col.name #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 2 × 2 #>   VARNAME  VARDESC #>   <chr>    <chr>   #> 1 PREGNANT NA      #> 2 REACT    NA      #>  #> -------------------- #> minmax_check: Failed  #> ERROR: some variables have values outside of the MIN to MAX range.  #> $minmax_check.Info #> # A tibble: 1 × 5 #>   Trait              Check ListedMin ListedMax OutOfRangeValues #>   <chr>              <lgl>     <dbl>     <dbl> <list>           #> 1 PERCEIVED_CONFLICT FALSE         1        15 <int [11]>       #>  #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 14   RESIST -9999    <NA> FALSE #> 16 CUFFSIZE -9999    <NA> FALSE #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-3","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 3","title":"dbGaPCheckup Vignette","text":", start check_report function. chunk, check_report determines 15 checks passed! ALERT — misleading!!!!! Rerunning check missing value codes defined, now see issue missing_value_check, underscores importance specifying missing value codes. immediately sure missing value codes , can use value_meaning_table utility/awareness function. see -9999 verified missing value code example.","code":"data(ExampleB) e3_report <- check_report(DD.dict.B, DS.data.B) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Passed Passed: unique description present for all variab… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Passed Passed: all missing value codes have a correspond… #> [1] \"All 15 checks passed.\" e3_report.v2 <- check_report(DD.dict.B, DS.data.B, non.NA.missing.codes=c(-9999)) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Passed Passed: unique description present for all variab… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 13 CUFFSIZE -9999    <NA> FALSE #>  #> -------------------- value_meaning_table(DD.dict.B) #>                 VARNAME                   TYPE VALUE #> 2             SAMPLE_ID integer, encoded value -9999 #> 3                   SEX integer, encoded value     0 #> 4                   SEX integer, encoded value     1 #> 5                HEIGHT decimal, encoded value -9999 #> 6                WEIGHT decimal, encoded value -9999 #> 7                   BMI decimal, encoded value -9999 #> 8               OBESITY integer, encoded value     0 #> 9               OBESITY integer, encoded value     1 #> 10              OBESITY integer, encoded value -9999 #> 11             ABD_CIRC decimal, encoded value -9999 #> 12             HIP_CIRC decimal, encoded value -9999 #> 13              ABD_SKF integer, encoded value -9999 #> 14              SUP_SKF integer, encoded value -9999 #> 15               RESIST integer, encoded value -9999 #> 16                REACT integer, encoded value -9999 #> 17             CUFFSIZE integer, encoded value     0 #> 18             CUFFSIZE integer, encoded value     1 #> 19             CUFFSIZE integer, encoded value     2 #> 20             CUFFSIZE integer, encoded value     3 #> 21          BP_SYSTOLIC integer, encoded value -9999 #> 22         BP_DIASTOLIC integer, encoded value -9999 #> 23                  HTN integer, encoded value     0 #> 24                  HTN integer, encoded value     1 #> 25                  HTN integer, encoded value -9999 #> 26           SMOKING_HX integer, encoded value     0 #> 27           SMOKING_HX integer, encoded value     1 #> 28           SMOKING_HX integer, encoded value -9999 #> 29 LENGTH_SMOKING_YEARS decimal, encoded value -9999 #> 30 LENGTH_SMOKING_YEARS decimal, encoded value -4444 #> 31           HEART_RATE integer, encoded value -9999 #> 32    PHYSICAL_ACTIVITY integer, encoded value -9999 #> 33                HX_DM integer, encoded value     0 #> 34                HX_DM integer, encoded value     1 #> 35                HX_DM integer, encoded value -9999 #> 36            HX_STROKE integer, encoded value     0 #> 37            HX_STROKE integer, encoded value     1 #> 38            HX_STROKE integer, encoded value -9999 #> 39           HX_ANXIETY integer, encoded value     0 #> 40           HX_ANXIETY integer, encoded value     1 #> 41           HX_ANXIETY integer, encoded value -9999 #> 42        HX_DEPRESSION integer, encoded value     0 #> 43        HX_DEPRESSION integer, encoded value     1 #> 44        HX_DEPRESSION integer, encoded value -9999 #> 45       SOCIAL_SUPPORT integer, encoded value     1 #> 46       SOCIAL_SUPPORT integer, encoded value     2 #> 47       SOCIAL_SUPPORT integer, encoded value     3 #> 48       SOCIAL_SUPPORT integer, encoded value     4 #> 49       SOCIAL_SUPPORT integer, encoded value     5 #> 50   PERCEIVED_CONFLICT integer, encoded value     1 #> 51   PERCEIVED_CONFLICT integer, encoded value    30 #> 52     PERCEIVED_HEALTH integer, encoded value     1 #> 53     PERCEIVED_HEALTH integer, encoded value    10 #>                                  MEANING #> 2                          missing value #> 3                                   male #> 4                                 female #> 5                          missing value #> 6                          missing value #> 7                          missing value #> 8                                     no #> 9                                    yes #> 10                         missing value #> 11                         missing value #> 12                         missing value #> 13                         missing value #> 14                         missing value #> 15                         missing value #> 16                         missing value #> 17                                 small #> 18                                medium #> 19                                 large #> 20                           extra large #> 21                         missing value #> 22                         missing value #> 23                                    no #> 24                                   yes #> 25                         missing value #> 26                                    no #> 27                                   yes #> 28                         missing value #> 29                         missing value #> 30 not applicable, no history of smoking #> 31                         missing value #> 32                         missing value #> 33                                    no #> 34                                   yes #> 35                         missing value #> 36                                    no #> 37                                   yes #> 38                         missing value #> 39                                    no #> 40                                   yes #> 41                         missing value #> 42                                    no #> 43                                   yes #> 44                         missing value #> 45                           very little #> 46                                little #> 47                              moderate #> 48                           quite a bit #> 49                          a great deal #> 50       lowest possible social conflict #> 51      highest possible social conflict #> 52     poorest possible perceived health #> 53        best possible perceived health"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-4","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 4","title":"dbGaPCheckup Vignette","text":"Note example, see error integer_check. Let’s investigate . Specifically, can use awareness function grep (.e., search) variable name dictionary can also look values data set see , fact, values decimals (integers dictionary suggests). can also use awareness function grep variables described “skinfold” measurements evaluate data TYPE across variables. see abdominal suprailiac skinfold thickness listed integers data dictionary, thought measured nearest mm. ABD_SKF appears true integer, SUP_SKF appears decimal places. error corrected either listing SUP_SKF TYPE decimal, investigating data set recording error.","code":"data(ExampleH) e4_report <- check_report(DD.dict.H, DS.data.H, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Failed ERROR: some variables listed as TYPE integer do n… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Passed Passed: unique description present for all variab… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Passed Passed: all missing value codes have a correspond… #> -------------------- #> integer_check: Failed  #> ERROR: some variables listed as TYPE integer do not appear to be integers.  #> $integer_check.Info #> [1] \"SUP_SKF\" #>  #> -------------------- dictionary_search(DD.dict.H, search.term=c(\"SUP_SKF\"), search.column=c(\"VARNAME\")) #> # A tibble: 1 × 22 #>   VARNAME VARDESC        DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>   <chr>          <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 SUP_SKF Suprailiac sk… NA      inte… mm       NA    NA NA      NA      NA      #> # … with 12 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, #> #   ...22 <chr>, and abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, #> #   ³​COMMENT2 table(DS.data.H$SUP_SKF) #>  #>  -9999     12     22 23.888     24     25     26     27     28 28.254     29  #>      3      2      4      1      4     11      4      6      2      1      1  #>     34     35     36     37     38     39  39.12     40     42     44     45  #>      4      7      3      2      3      6      1      9      2      6      3  #>     46     48     51     52  #>      4      3      2      6 dictionary_search(DD.dict.H, search.term=c(\"skinfold\")) #> # A tibble: 2 × 22 #>   VARNAME VARDESC        DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>   <chr>          <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 ABD_SKF Abdominal ski… NA      inte… mm       NA    NA NA      NA      NA      #> 2 SUP_SKF Suprailiac sk… NA      inte… mm       NA    NA NA      NA      NA      #> # … with 12 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, #> #   ...22 <chr>, and abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, #> #   ³​COMMENT2 table(DS.data.H$ABD_SKF) #>  #> -9999    14    18    21    22    23    24    25    26    27    28    29    30  #>     3     1     2     2     1     4    11    22     4     1     6     4     2  #>    31    32    34    35    36    38    39    40    41    42    45    51    54  #>     3     2     5     4     5     6     2     1     1     1     1     1     1  #>    61    65    68  #>     2     1     1"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-5","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 5","title":"dbGaPCheckup Vignette","text":"example, dbGaPCheckup informs us several issues — let’s focus first name_check results. variable names match data dictionary data, wrong order. Instead fixing issue manually outside R, can simply call reoder_dictionary function “quick fix” run name_report function confirm update works! , see name_check now passes! Moving forward, simply return check_report workflow search potential issues.","code":"data(ExampleN) check_report(DD.dict.N, DS.data.N) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Passed        Passed: package-level required fields TYPE… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Failed        ERROR: the variable names match between th… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check name_check faile… #>  8 type_check          Passed        Passed: All TYPE entries found are accepte… #>  9 values_check        Failed        ERROR: at least one VALUES check flagged p… #> 10 integer_check       Not attempted ERROR: Required pre-check name_check faile… #> 11 decimal_check       Not attempted ERROR: Required pre-check name_check faile… #> 12 misc_format_check   Failed        ERROR: at least one check failed.           #> 13 description_check   Failed        ERROR: missing and duplicate descriptions … #> 14 minmax_check        Not attempted ERROR: Required pre-check name_check faile… #> 15 missing_value_check Not attempted ERROR: Required pre-check name_check faile… #> -------------------- #> name_check: Failed  #> ERROR: the variable names match between the data dictionary and the data, but they are in the wrong order. Consider using reorder_dictionary function to automatically reorder the dictionary so that you can continue working through the checks.  #> $name_check.Info #> # A tibble: 10 × 2 #>    Data                       Dict                       #>    <chr>                      <chr>                      #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             #>  2 Data: HIP_CIRC             Dict: ABD_SKF              #>  3 Data: ABD_SKF              Dict: SUP_SKF              #>  4 Data: SUP_SKF              Dict: ABD_CIRC             #>  5 Data: BP_DIASTOLIC         Dict: HTN                  #>  6 Data: HTN                  Dict: SMOKING_HX           #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         #>  #> -------------------- #> values_check: Failed  #> ERROR: at least one VALUES check flagged potentials issues. See Information for more details.  #> $values_check.Info #>    column_name values.check            vname                   type #> 4      VALUES3        FALSE         CUFFSIZE integer, encoded value #> 6       VALUES        FALSE              HTN integer, encoded value #> 7       VALUES        FALSE PERCEIVED_HEALTH integer, encoded value #> 9      VALUES5        FALSE               28 integer, encoded value #> 10     VALUES4        FALSE               28 integer, encoded value #> 12     VALUES2        FALSE               16 integer, encoded value #> 14      VALUES        FALSE           RESIST integer, encoded value #> 15      VALUES        FALSE        SAMPLE_ID                integer #> 16      VALUES        FALSE              SEX                integer #>                                                   problematic_description #> 4                                                           2 means large #> 6                                                          0 indicates no #> 7  Between 1 and 10 with higher values indicating better perceived health #> 9                                                        5 = a great deal #> 10                                                        4 = quite a bit #> 12                                                              1 =medium #> 14                                                                   <NA> #> 15                                                    -9999=missing value #> 16                                                                 0=male #>                                                                         check #> 4                  Check 1: Is an equals sign present for all values columns? #> 6                  Check 1: Is an equals sign present for all values columns? #> 7                  Check 1: Is an equals sign present for all values columns? #> 9  Check 2: Are there any leading/trailing spaces near the first equals sign? #> 10 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 12 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 14  Check 3: Do all variables of TYPE encoded have at least one VALUES entry? #> 15            Check 4: Are all variables with VALUES entries of TYPE encoded? #> 16            Check 4: Are all variables with VALUES entries of TYPE encoded? #>  #> -------------------- #> misc_format_check: Failed  #> ERROR: at least one check failed.  #> $misc_formatting_check.Info #> # A tibble: 7 × 6 #>   check.name check.description                   check…¹ details col.n…² correct #>   <chr>      <chr>                               <chr>   <chr>   <chr>   <lgl>   #> 1 Check 1    Duplicate variable name check       Passed  NA      NA      NA      #> 2 Check 2    Check for use of `dbgap` in variab… Passed  NA      NA      NA      #> 3 Check 4    Column names after `VALUES` should… Failed  NA      VALUES2 FALSE   #> 4 Check 4    Column names after `VALUES` should… Failed  NA      VALUES3 FALSE   #> 5 Check 4    Column names after `VALUES` should… Failed  NA      VALUES4 FALSE   #> 6 Check 4    Column names after `VALUES` should… Failed  NA      VALUES5 FALSE   #> 7 Check 4    Column names after `VALUES` should… Failed  NA      VALUES6 FALSE   #> # … with abbreviated variable names ¹​check.status, ²​col.name #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 2 × 2 #>   VARNAME  VARDESC #>   <chr>    <chr>   #> 1 PREGNANT NA      #> 2 REACT    NA      #>  #> -------------------- DD.dict_updated <- reorder_dictionary(DD.dict.N, DS.data.N) #> $Message #> [1] \"CORRECTED ERROR: the variable names match between the data dictionary and the data, but they were in the wrong order. ***ALERT**** this function has temporarily reordered the dictionary to match the data so that you can continue working through the checks.\" #>  #> $Information #> # A tibble: 10 × 3 #>    Data                       Dict                       New.Dict                #>    <chr>                      <chr>                      <chr>                   #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             Data: ABD_CIRC          #>  2 Data: HIP_CIRC             Dict: ABD_SKF              Data: HIP_CIRC          #>  3 Data: ABD_SKF              Dict: SUP_SKF              Data: ABD_SKF           #>  4 Data: SUP_SKF              Dict: ABD_CIRC             Data: SUP_SKF           #>  5 Data: BP_DIASTOLIC         Dict: HTN                  Data: BP_DIASTOLIC      #>  6 Data: HTN                  Dict: SMOKING_HX           Data: HTN               #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS Data: SMOKING_HX        #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           Data: LENGTH_SMOKING_Y… #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    Data: HEART_RATE        #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         Data: PHYSICAL_ACTIVITY name_check(DD.dict_updated, DS.data.N) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"example-6","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation > 5.1 Check, utility, and awareness functions","what":"Example 6","title":"dbGaPCheckup Vignette","text":"mentioned , prefer, can also simply run individual checks interested rather taking complete workflow approach. Note several package-specific pre-checks embedded many functions (e.g., integer_check). see issue discovered minmax_check. Let’s investigate . approach view “range values” bit cryptic, can done following code. see forgot specify missing value codes ran minmax_check, flagged errors. Let’s rerun command specifying -4444 -9999 missing value codes. Now see check passed data set!","code":"data(ExampleA) id_check(DS.data.A) #> $Message #> [1] \"Passed: All ID variable checks passed.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Passed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Passed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Passed    No ill… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Passed    No lea… #> # … with abbreviated variable name ¹​check.status misc_format_check(DD.dict.A, DS.data.A)  #> $Message #> [1] \"Passed: no check-specific formatting issues identified.\" #>  #> $Information #> # A tibble: 3 × 4 #>   check.name check.description                           check.status details #>   <chr>      <chr>                                       <chr>        <chr>   #> 1 Check 1    Duplicate variable name check               Passed       NA      #> 2 Check 2    Check for use of `dbgap` in variable names  Passed       NA      #> 3 Check 4    Column names after `VALUES` should be empty Passed       NA row_check(DS.data.A) #> $Message #> [1] \"Passed: no blank or duplicate rows detected.\" NA_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: no NA values detected in data set.\" minmax_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait    Check ListedMin ListedMax OutOfRangeValues #>   <chr>    <lgl>     <dbl>     <dbl> <list>           #> 1 PREGNANT FALSE         0         1 <int [2]> b <- minmax_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait    Check ListedMin ListedMax OutOfRangeValues #>   <chr>    <lgl>     <dbl>     <dbl> <list>           #> 1 PREGNANT FALSE         0         1 <int [2]> b$Information[[1]]$OutOfRangeValues #> [[1]] #> [1] -4444 -9999 minmax_check(DD.dict.A, DS.data.A, non.NA.missing.codes=c(-4444, -9999)) #> $Message #> [1] \"Passed: when provided, all variables are within the MIN to MAX range.\""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"reporting-functions","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation","what":"Reporting functions","title":"dbGaPCheckup Vignette","text":"also created awareness reporting functions built complete workflow approach. functions generate graphical textual descriptions awareness checks data HTML format. reports designed help catch potential errors data set. Note create_report generated quite long however, recommend submit subsets variables time. Specification missing value codes also important effective plotting. commands ran , work best initiated interactively. details learn , see appendices (create_awareness_report, Appendix ; create_report, Appendix B).","code":"# Functions not run here as they work best when initiated interactively # Awareness Report (See Appendix A for more details) create_awareness_report(DD.dict, DS.data, non.NA.missing.codes=c(-9999, -4444),    output.path= tempdir())     # Data Report (See Appendix B for more details) create_report(DD.dict, DS.data, sex.split=TRUE, sex.name= \"SEX\",    start = 3, end = 7, non.NA.missing.codes=c(-9999,-4444),    output.path= tempdir(), open.html=TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"label-data-function","dir":"Articles","previous_headings":"5 Execution with example runs and interpretation","what":"Label data function","title":"dbGaPCheckup Vignette","text":"Note data dictionary fully consistent data, can use label_data function convert data labelled data, essentially embedding data dictionary data future use! function uses Haven labelled data SPSS style missing data codes add non-missing information data dictionary attributes data.","code":"DS_labelled_data <- label_data(DD.dict.A, DS.data.A, non.NA.missing.codes=c(-9999)) labelled::var_label(DS_labelled_data$SEX) #> [1] \"Sex assigned at birth\" labelled::val_labels(DS_labelled_data$SEX) #>   male female  #>      0      1 attributes(DS_labelled_data$SEX) #> $labels #>   male female  #>      0      1  #>  #> $label #> [1] \"Sex assigned at birth\" #>  #> $class #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"integer\"        #>  #> $TYPE #> [1] \"integer, encoded value\" #>  #> $MIN #> [1] 0 #>  #> $MAX #> [1] 1 labelled::na_values(DS_labelled_data$HX_DEPRESSION) #> missing value  #>         -9999"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"appendix-reporting-functions","dir":"Articles","previous_headings":"","what":"Appendix: Reporting functions","title":"dbGaPCheckup Vignette","text":"described , variety awareness reporting functions built complete workflow approach. purpose appendix highlight features using following example data.","code":"data(ExampleB)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"appendix-a-awareness-report","dir":"Articles","previous_headings":"6 Appendix: Reporting functions","what":"Appendix A: Awareness Report","title":"dbGaPCheckup Vignette","text":"Run create_awareness_report, creates nice .Rmd version checks. output nearly identical see using create_awareness_report function, purposes vignette, expanded annotation assist interpretation output example.","code":"# Not run as works best when run interactively create_awareness_report(DD.dict, DS.data, non.NA.missing.codes=c(-9999),    output.path= tempdir())"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"missingness-summary","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report","what":"Missingness Summary","title":"dbGaPCheckup Vignette","text":"awareness function summarizes amount missingness data set.  0 variables example data set percent missingness >95%. Navigating output, also see complete summary missingness data set, SAMPLE_ID highest % missingness 16%. Finally see histogram plotting missingness across data set.","code":"missingness_summary(DS.data.B, non.NA.missing.codes = c(-9999), threshold = 95) #> $Message #> [1] \"There are 0 variables with a percent missingness > 95% in your data set.\" #>  #> $threshold_summary #> [1] missing             percent_missingness #> <0 rows> (or 0-length row.names) #>  #> $full_missingness_summary #>                      missing percent_missingness #> SAMPLE_ID                 16                  16 #> SMOKING_HX                 5                   5 #> PHYSICAL_ACTIVITY          4                   4 #> WEIGHT                     3                   3 #> BMI                        3                   3 #> OBESITY                    3                   3 #> ABD_CIRC                   3                   3 #> HIP_CIRC                   3                   3 #> ABD_SKF                    3                   3 #> SUP_SKF                    3                   3 #> RESIST                     3                   3 #> REACT                      3                   3 #> HX_DM                      3                   3 #> HX_STROKE                  3                   3 #> HEIGHT                     2                   2 #> CUFFSIZE                   2                   2 #> BP_SYSTOLIC                2                   2 #> BP_DIASTOLIC               2                   2 #> HTN                        2                   2 #> HX_ANXIETY                 2                   2 #> HX_DEPRESSION              2                   2 #> SUBJECT_ID                 0                   0 #> AGE                        0                   0 #> SEX                        0                   0 #> LENGTH_SMOKING_YEARS       0                   0 #> HEART_RATE                 0                   0 #> SOCIAL_SUPPORT             0                   0 #> PERCEIVED_CONFLICT         0                   0 #> PERCEIVED_HEALTH           0                   0"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"values-missing-tables","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report","what":"Values Missing Tables","title":"dbGaPCheckup Vignette","text":"value_missing_table function, variable, three sets possible values: set D unique values observed data; set V values explicitly encoded VALUES columns data dictionary; set M missing value codes defined user via non.NA.missing.codes argument. function examines various intersections three sets, providing awareness checks possible issues concern.","code":"results.list <- value_missing_table(DD.dict.B, DS.data.B, non.NA.missing.codes = c(-9999)) #> $Message #> [1] \"Flag: at least one check flagged.\" #>  #> $Information #> # A tibble: 7 × 4 #>   check.name                     check.description              check…¹ details  #>   <chr>                          <chr>                          <chr>   <named > #> 1 Check A: In M, Not in D        \"All missing value codes are … Flag    <tibble> #> 2 Check B: In V, Not in D        \"All value codes are in the d… Flag    <tibble> #> 3 Check C: In M, Not in V        \"All missing value codes are … Flag    <tibble> #> 4 Check D: In M & in D, not in V \"All missing value codes are … Flag    <tibble> #> 5 Check E: V NOT in M, NOT in D  \"All value codes no defined a… Passed  <chr>    #> 6 Awareness: NsetD vs. NsetV     \"Size of Set D vs size of set… Info    <tibble> #> 7 Awareness: N_DnotM vs. N_VnotM \"Size of Set D\\\\M vs size of … Info    <tibble> #> # … with abbreviated variable name ¹​check.status results <- results.list$report"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-a-if-the-user-defines-a-missing-value-code-that-is-not-present-in-the-data-in-set-m-and-not-in-set-d-","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report > 6.1.2 Values Missing Tables","what":"Check A: If the user defines a missing value code that is not present in the data (In Set M and Not in Set D).","title":"dbGaPCheckup Vignette","text":"Table Check : List variables user-defined missing value code present data. table lists variables user-defined missing value code -9999 present data. necessarily errors, however, dbGaPCheckup reads non.NA.missing.codes “global” missing value codes, even specific variable contain code. example, example data set, SEX variable complete, containing missing value codes containing encoded values 0=male, 1=female, SEX flagged variable list since contain -9999 value. words, variable’s presence list issue concerned . function attended bring awareness potential errors data (e.g., perhaps knew sex variable missing 5 participants specific study.) Interpretation table column names: –> AllMInD: Variable-specific check result communicating user-defined missing value code(s) detected data set (FALSE=). –> NsetD: Number values (levels) detected data (e.g., example, SEX two levels [0=male, 1=female]). –> NsetM: Number missing value codes defined (e.g., example, 1 user-defined missing value code [-9999] defined). –> NsetDAndSetM: Number occurrences detected data set user-defined missing value code (e.g., 0 overlap variables, second missing value code defined, might see 1 ). –> MNotInD: User-defined missing value code function checked (e.g., example, -9999). –> MInD: Variable-specific number; user-defined missing value codes detected data (e.g., example, 0).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-b-if-a-values-entry-defines-an-encoded-code-value-but-that-value-is-not-present-in-the-data-in-set-v-and-not-in-set-d-","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report > 6.1.2 Values Missing Tables","what":"Check B: If a VALUES entry defines an encoded code value, but that value is not present in the data (In Set V and Not in Set D).","title":"dbGaPCheckup Vignette","text":"Table Check B: List variables VALUES entry defines encoded code value, value present data. table lists variables VALUES entry defines encoded value (.e., value=meaning; e.g., 0=male), value present data. ideally defined encoded values (.e., set V) observed data (.e., set D), necessarily error one . Interpretation table column names: –> AllVsInD: Check result communicating parsed VALUES entries detected data set (FALSE=). –> NsetD: Number values (levels) detected data (e.g., example, LENGTH_SMOKING_YEARS 12 unique levels). –> NsetV: Number encoded value codes detected (e.g., example, LENGTH_SMOKING_YEARS two encoded values). –> NsetDAndSetV: Number occurrences detected data set VALUES entries (e.g., example, LENGTH_SMOKING_YEARS one two encoded values detected data). –> VsNotInD: Encoded value detected data (e.g., example, -9999 detected either variable). awareness check alerts us two potential errors. Specifically, -9999 defined missing value code LENGTH_SMOKING_YEARS HEART_RATE, code detected data . Looking closely, see missing value code -4444, -9999, used LENGTH_SMOKING_YEARS, HEART_RATE complete variable missing data. -9999 removed VALUES entry variables -4444 added non.NA.missing.value.code function example data set.","code":"# Smoking  table(DS.data.B$LENGTH_SMOKING_YEARS) #>  #> -4444   0.5   1.5     5    10    14    15    25    44    45    50    52  #>    84     1     1     1     1     1     3     2     2     1     2     1 dictionary_search(DD.dict.B, search.term=c(\"LENGTH_SMOKING_YEARS\"), search.column=c(\"VARNAME\")) #> # A tibble: 1 × 21 #>   VARNAME        VARDESC DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>          <chr>   <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 LENGTH_SMOKIN… How ma… NA      deci… years    NA    NA NA      NA      NA      #> # … with 11 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, and #> #   abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, ³​COMMENT2  # Heart rate  table(DS.data.B$HEART_RATE) #>  #>  38  45  46  47  48  49  50  52  54  55  56  57  58  59  60  64  65  67  68  72  #>   1   5   1   1   2   1   1   2   2   1   3   1   5   1   1   1   8   1   2   2  #>  73  74  75  76  78  79  82  83  85  86  90  91  95  96  98 100 105 107 110 113  #>   1   1   9   3   1   1   1   1   9   2   2   1  13   1   1   1   1   1   3   1  #> 114 115 125 135  #>   1   1   1   1 dictionary_search(DD.dict.B, search.term=c(\"HEART_RATE\"), search.column=c(\"VARNAME\")) #> # A tibble: 1 × 21 #>   VARNAME    VARDESC     DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>      <chr>       <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 HEART_RATE Heart rate… NA      inte… beat…    NA    NA NA      NA      NA      #> # … with 11 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, and #> #   abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, ³​COMMENT2"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-c-if-the-user-defines-a-missing-value-code-that-is-not-defined-in-a-values-entry-in-set-m-and-not-in-set-v-","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report > 6.1.2 Values Missing Tables","what":"Check C: If the user defines a missing value code that is not defined in a VALUES entry (In Set M and Not in Set V).","title":"dbGaPCheckup Vignette","text":"Table Check C: List variables user-defined missing value code(s) defined VALUES entry. Interpretation table column names: –> AllSetMInSetV: Variable-specific check result communicating user-defined missing value code(s) detected VALUES entry (FALSE=). –> NsetV: Number encoded value codes detected (e.g., example, SEX two levels [0=male, 1=female]). –> NsetM: Number missing value codes defined (e.g., example, 1 user-defined missing value code [-9999] defined). –> NsetMAndSetD: Number occurrences detected user-defined missing value code data set. –> SetMsNotInSetV: Missing value code defined detected VALUES entries (e.g., -9999).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-d-if-a-user-defined-missing-value-code-is-present-in-the-data-for-a-given-variable-but-that-variable-does-not-have-a-corresponding-values-entry-m-in-set-d-and-not-in-set-v-","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.1 Appendix A: Awareness Report > 6.1.2 Values Missing Tables","what":"Check D: If a user-defined missing value code is present in the data for a given variable, but that variable does not have a corresponding VALUES entry (M in Set D and Not in Set V).","title":"dbGaPCheckup Vignette","text":"Table Check D: List variables user-defined missing value code present data given variable, variable corresponding VALUES entry. Interpretation table column names: –> All_MInSetD_InSetV: Variable-specific check result communicating user-defined missing value code(s) detected data given variable, variable corresponding VALUES entry (FALSE=). –> setMInDNotInV: Encoded value codes detected data corresponding VALUES entry. Note check identified true error! Specifically CUFFSIZE missing value code data, -9999, defined encoded value VALUES columns.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"check-e-if-a-values-entry-is-not-defined-as-a-missing-value-code-and-is-not-identified-in-the-data--set-v-values-that-are-not-in-set-m-that-are-not-in-set-d-","dir":"Articles","previous_headings":"6 Appendix: Reporting functions","what":"Check E: If a VALUES entry is NOT defined as a missing value code AND is NOT identified in the data. ((Set V values that are NOT in Set M) that are NOT in Set D).","title":"dbGaPCheckup Vignette","text":"Table Check E: List variables VALUES entry defined missing value code identified data Interpretation table column names: –> All_VNotInM_NotInD: Variable-specific check result communicating encoded values defined missing value code detected data (FALSE=). –> setVNotInM_NotInD: Encoded value codes detected VALUES entry listed missing value code detected data. example , VALUES entries defined missing values codes listed data - check passes.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"appendix-b-data-report","dir":"Articles","previous_headings":"6 Appendix: Reporting functions","what":"Appendix B: Data Report","title":"dbGaPCheckup Vignette","text":"Next can run create_report, generates textual graphical report selected variables HTML format optionally open report web browser. awareness report designed help catch potential errors data set. Note report generated quite long however, recommend submit subsets variables time. example , speed rendering, create report variables columns 3 7. Note option plot/report data split sex desired. Specification missing value codes also important effective plotting. , code generates nearly identical output create_report function, additional annotation added purposes vignette ease interpretation.","code":"# Not run as works best when run interactively create_report(DD.dict, DS.data, sex.split=TRUE, sex.name= \"SEX\",    start = 3, end = 7, non.NA.missing.codes=c(-9999,-4444),    output.path= tempdir(), open.html=TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"summary-and-plots","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.3 Appendix B: Data Report","what":"Summary and plots","title":"dbGaPCheckup Vignette","text":"","code":"#>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union dat_function_selected(DS.data.B, DD.dict.B, sex.split = TRUE, sex.name = \"SEX\", start = 3, end = 6, dataset.na=dataset.na, h.level=4)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"age---integer","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.3 Appendix B: Data Report > 6.3.1 Summary and plots","what":"AGE - integer","title":"dbGaPCheckup Vignette","text":"Check passed: AGE integer TYPE integers AGE missing values. AGE missing values mapping missing codes NA.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"sex---integer-encoded-value","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.3 Appendix B: Data Report > 6.3.1 Summary and plots","what":"SEX - integer, encoded value","title":"dbGaPCheckup Vignette","text":"Check passed: SEX integer TYPE integers SEX missing values. SEX missing values mapping missing codes NA.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"height---decimal-encoded-value","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.3 Appendix B: Data Report > 6.3.1 Summary and plots","what":"HEIGHT - decimal, encoded value","title":"dbGaPCheckup Vignette","text":"HEIGHT missing values. 53 missing values HEIGHT mapping missing codes NA.","code":"#> Warning: Removed 2 rows containing non-finite values (`stat_count()`). #> Warning: Removed 2 rows containing non-finite values (`stat_density()`). #> Warning: Removed 2 rows containing non-finite values (`stat_count()`). #> Warning: Removed 2 rows containing non-finite values (`stat_density()`)."},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"weight---decimal-encoded-value","dir":"Articles","previous_headings":"6 Appendix: Reporting functions > 6.3 Appendix B: Data Report > 6.3.1 Summary and plots","what":"WEIGHT - decimal, encoded value","title":"dbGaPCheckup Vignette","text":"WEIGHT missing values. 2 missing values WEIGHT mapping missing codes NA. see full report variables AGE, SEX, HEIGHT, WEIGHT well AGE, HEIGHT, WEIGHT split sex. Given complexity many data sets, report created investigators easily manually review data potential errors (e.g., sex=male appearing data pregnant participants female assigned birth).","code":"#> Warning: Removed 3 rows containing non-finite values (`stat_count()`). #> Warning: Removed 3 rows containing non-finite values (`stat_density()`). #> Warning: Removed 3 rows containing non-finite values (`stat_count()`). #> Warning: Removed 3 rows containing non-finite values (`stat_density()`)."},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"contact-information","dir":"Articles","previous_headings":"","what":"Contact information","title":"dbGaPCheckup Vignette","text":"questions comments, please feel free contact us! Lacey W. Heinsberg: law145@pitt.edu Daniel E. Weeks: weeks@pitt.edu Bug reports: https://github.com/lwheinsberg/dbGaPCheckup/issues","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/articles/dbGaPCheckup_vignette.html","id":"acknowledgments","dir":"Articles","previous_headings":"","what":"Acknowledgments","title":"dbGaPCheckup Vignette","text":"package developed partial support National Institutes Health award numbers R01HL093093, R01HL133040, K99HD107030. eval_function dat_function functions form backbone awareness reports inspired elegant 2016 homework answer submitted Tanbin Rahman HUGEN 2070 course ‘Bioinformatics Human Genetics’. also like thank Nick Moshgat testing providing feedback package development.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lacey W. Heinsberg. Author, maintainer. Daniel E. Weeks. Author. University Pittsburgh. Copyright holder.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heinsberg LW, Weeks DE (2023). dbGaPCheckup: dbGaP Checkup. https://lwheinsberg.github.io/dbGaPCheckup/, https://github.com/lwheinsberg/dbGaPCheckup.","code":"@Manual{,   title = {dbGaPCheckup: dbGaP Checkup},   author = {Lacey W. Heinsberg and Daniel E. Weeks},   year = {2023},   note = {https://lwheinsberg.github.io/dbGaPCheckup/, https://github.com/lwheinsberg/dbGaPCheckup}, }"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_1-overview","dir":"","previous_headings":"","what":"1 Overview","title":"dbGaP Checkup","text":"want make data sing, torturing instead. real data please stand ? goal dbGaPCheckup make National Library Medicine database Genotypes Phenotypes (dbGaP) data set submission tiny bit easier. Specifically, package implements several check, awareness, utility, reporting functions designed help ensure Subject Phenotype data set data dictionary meet variety dbGaP specific formatting requirements. list functions available can found . self-archived version submitted (.e., pre-peer reviewed) manuscript (dbGaPCheckup_Manuscript_Pre-Review.docx) added GitHub repository accessibility. List function names types.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_2-copyright-information","dir":"","previous_headings":"","what":"2 Copyright information","title":"dbGaP Checkup","text":"Copyright 2022, University Pittsburgh. Rights Reserved. License: GPL-2","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_3-installation","dir":"","previous_headings":"","what":"3 Installation","title":"dbGaP Checkup","text":"can install dbGaPCheckup CRAN using: can install development version dbGaPCheckup GitHub using:","code":"install.packages(\"dbGaPCheckup\") # install.packages(\"devtools\") devtools::install_github(\"lwheinsberg/dbGaPCheckup\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_4-example","dir":"","previous_headings":"","what":"4 Example","title":"dbGaP Checkup","text":"introductory example provided . details see https://lwheinsberg.github.io/dbGaPCheckup/ dbGaPCheckup_vignette (expanded instructions) dbGaPCheckup (Quick Start) vignette documents. special note: see , package requires several fields beyond required dbGaP formatting requirements. Specifically, dbGaP requires VARNAME, VARDESC, UNITS, VALUES columns present data dictionary, package requires MIN, MAX, TYPE fields also included. data dictionary include fields already, can use add_missing_fields function auto fill (see ). Read Subject Phenotype data DS.data. Read Subject Phenotype data dictionary DD.dict. Run function check_report. Note , many functions, specification missing value codes important accurate results. described detail dbGaPCheckup_vignette vignette, checks contain embedded “pre-checks” must passed check can run. example, mentioned , package requires MIN, MAX, TYPE fields data dictionary. can see several checks (e.g., NA_check, integer_check, decimal_check) run additional required fields missing. Never fear though! created function auto fill fields can used get along checks! fields added, can simply return run checks. Don’t forget use updated dictionary though! Now see 13 15 checks pass, workflow fails description_check missing_value_check. Specifically, description_check see variables PREGNANT REACT identified missing variable descriptions (VARDESC), variables HEIGHT WEIGHT incorrectly identical descriptions. missing_value_check, see variable CUFFSIZE contains -9999 encoded value specified VALUES column. included functions support “simple fixes”, issues identified need corrected manually data dictionary moving . Note package also includes helpful reporting functions (create_report create_awareness_report) can help fully interrogate data catch potential errors prior dbGaP data submission. Finally, data dictionary fully consistent data, can use label_data function convert data labelled data, essentially embedding data dictionary data. information reporting functions, checks available package, see Quick Start (dbGaPCheckup) expanded (dbGaPCheckup_vignette) vignettes information!","code":"library(dbGaPCheckup) DS.path <- system.file(\"extdata\", \"DS_Example.txt\",    package = \"dbGaPCheckup\", mustWork=TRUE) DS.data <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2f.xlsx\",    package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict <- readxl::read_xlsx(DD.path) #> New names: #> • `` -> `...15` #> • `` -> `...16` #> • `` -> `...17` #> • `` -> `...18` #> • `` -> `...19` report <- check_report(DD.dict = DD.dict, DS.data = DS.data, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Failed        ERROR: not all package-level required fiel… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Passed        Passed: the variable names match between t… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check pkg_field_check … #>  8 type_check          Failed        ERROR: TYPE column not found. Consider usi… #>  9 values_check        Not attempted ERROR: Required pre-check type_check faile… #> 10 integer_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 11 decimal_check       Not attempted ERROR: Required pre-check pkg_field_check … #> 12 misc_format_check   Passed        Passed: no check-specific formatting issue… #> 13 description_check   Failed        ERROR: missing and duplicate descriptions … #> 14 minmax_check        Not attempted ERROR: Required pre-check pkg_field_check … #> 15 missing_value_check Not attempted ERROR: Required pre-check pkg_field_check … #> -------------------- #> pkg_field_check: Failed  #> ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.  #> $pkg_field_check.Info #>  TYPE   MIN   MAX  #> FALSE FALSE FALSE  #>  #> -------------------- #> type_check: Failed  #> ERROR: TYPE column not found. Consider using the add_missing_fields function to autofill TYPE.  #> $type_check.Info #> [1] \"ERROR: TYPE column not found.\" #>  #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT <NA>                  #> 2 REACT    <NA>                  #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> -------------------- DD.dict.updated <- add_missing_fields(DD.dict, DS.data) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\" report.v2 <- check_report(DD.dict = DD.dict.updated , DS.data = DS.data, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Failed ERROR: missing and duplicate descriptions found i… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> description_check: Failed  #> ERROR: missing and duplicate descriptions found in data dictionary.  #> $description_check.Info #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT <NA>                  #> 2 REACT    <NA>                  #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 16 CUFFSIZE -9999    <NA> FALSE #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_5-contact-information","dir":"","previous_headings":"","what":"5 Contact information","title":"dbGaP Checkup","text":"questions comments, please feel free contact us! Lacey W. Heinsberg, PhD, RN: law145@pitt.edu Daniel E. Weeks, PhD: weeks@pitt.edu Bug reports: https://github.com/lwheinsberg/dbGaPCheckup/issues","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/index.html","id":"id_6-acknowledgments","dir":"","previous_headings":"","what":"6 Acknowledgments","title":"dbGaP Checkup","text":"package developed partial support National Institutes Health award numbers R01HL093093, R01HL133040, K99HD107030. eval_function dat_function functions form backbone awareness reports inspired elegant 2016 homework answer submitted Tanbin Rahman HUGEN 2070 course ‘Bioinformatics Human Genetics’. also like thank Nick Moshgat testing providing feedback package development.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.A.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.A — DD.dict.A","title":"DD.dict.A — DD.dict.A","text":"Data dictionary embedded ExampleA.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.A — DD.dict.A","text":"","code":"data(ExampleA)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.B.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.B — DD.dict.B","title":"DD.dict.B — DD.dict.B","text":"Data dictionary embedded ExampleB.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.B — DD.dict.B","text":"","code":"data(ExampleB)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.C.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.C — DD.dict.C","title":"DD.dict.C — DD.dict.C","text":"Data dictionary embedded ExampleC.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.C — DD.dict.C","text":"","code":"data(ExampleC)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.D.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.D — DD.dict.D","title":"DD.dict.D — DD.dict.D","text":"Data dictionary embedded ExampleD.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.D — DD.dict.D","text":"","code":"data(ExampleD)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.E.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.E — DD.dict.E","title":"DD.dict.E — DD.dict.E","text":"Data dictionary embedded ExampleE.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.E.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.E — DD.dict.E","text":"","code":"data(ExampleE)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.F.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.F — DD.dict.F","title":"DD.dict.F — DD.dict.F","text":"Data dictionary embedded ExampleF.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.F — DD.dict.F","text":"","code":"data(ExampleF)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.G.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.G — DD.dict.G","title":"DD.dict.G — DD.dict.G","text":"Data dictionary embedded ExampleG.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.G — DD.dict.G","text":"","code":"data(ExampleG)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.H.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.H — DD.dict.H","title":"DD.dict.H — DD.dict.H","text":"Data dictionary embedded ExampleH.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.H.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.H — DD.dict.H","text":"","code":"data(ExampleH)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.I.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.I — DD.dict.I","title":"DD.dict.I — DD.dict.I","text":"Data dictionary embedded ExampleI.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.I.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.I — DD.dict.I","text":"","code":"data(ExampleI)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.J.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.J — DD.dict.J","title":"DD.dict.J — DD.dict.J","text":"Data dictionary embedded ExampleJ.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.J.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.J — DD.dict.J","text":"","code":"data(ExampleJ)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.K.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.K — DD.dict.K","title":"DD.dict.K — DD.dict.K","text":"Data dictionary embedded ExampleK.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.K — DD.dict.K","text":"","code":"data(ExampleK)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.L.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.L — DD.dict.L","title":"DD.dict.L — DD.dict.L","text":"Data dictionary embedded ExampleL.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.L — DD.dict.L","text":"","code":"data(ExampleL)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.M.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.M — DD.dict.M","title":"DD.dict.M — DD.dict.M","text":"Data dictionary embedded ExampleM.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.M.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.M — DD.dict.M","text":"","code":"data(ExampleM)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.N.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.N — DD.dict.N","title":"DD.dict.N — DD.dict.N","text":"Data dictionary embedded ExampleN.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.N.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.N — DD.dict.N","text":"","code":"data(ExampleN)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.Q.html","id":null,"dir":"Reference","previous_headings":"","what":"DD.dict.Q — DD.dict.Q","title":"DD.dict.Q — DD.dict.Q","text":"Data dictionary embedded ExampleQ.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DD.dict.Q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DD.dict.Q — DD.dict.Q","text":"","code":"data(ExampleQ)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.A.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.A — DS.data.A","title":"DS.data.A — DS.data.A","text":"Data set embedded ExampleA.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.A — DS.data.A","text":"","code":"data(ExampleA)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.B.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.B — DS.data.B","title":"DS.data.B — DS.data.B","text":"Data set embedded ExampleB.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.B.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.B — DS.data.B","text":"","code":"data(ExampleB)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.C.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.C — DS.data.C","title":"DS.data.C — DS.data.C","text":"Data set embedded ExampleC.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.C — DS.data.C","text":"","code":"data(ExampleC)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.D.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.D — DS.data.D","title":"DS.data.D — DS.data.D","text":"Data set embedded ExampleD.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.D — DS.data.D","text":"","code":"data(ExampleD)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.E.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.E — DS.data.E","title":"DS.data.E — DS.data.E","text":"Data set embedded ExampleE.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.E.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.E — DS.data.E","text":"","code":"data(ExampleE)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.F.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.F — DS.data.F","title":"DS.data.F — DS.data.F","text":"Data set embedded ExampleF.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.F — DS.data.F","text":"","code":"data(ExampleF)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.G.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.G — DS.data.G","title":"DS.data.G — DS.data.G","text":"Data set embedded ExampleG.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.G — DS.data.G","text":"","code":"data(ExampleG)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.H.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.H — DS.data.H","title":"DS.data.H — DS.data.H","text":"Data set embedded ExampleH.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.H.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.H — DS.data.H","text":"","code":"data(ExampleH)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.I.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.I — DS.data.I","title":"DS.data.I — DS.data.I","text":"Data set embedded ExampleI.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.I.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.I — DS.data.I","text":"","code":"data(ExampleI)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.J.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.J — DS.data.J","title":"DS.data.J — DS.data.J","text":"Data set embedded ExampleJ.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.J.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.J — DS.data.J","text":"","code":"data(ExampleJ)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.K.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.K — DS.data.K","title":"DS.data.K — DS.data.K","text":"Data set embedded ExampleK.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.K — DS.data.K","text":"","code":"data(ExampleK)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.L.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.L — DS.data.L","title":"DS.data.L — DS.data.L","text":"Data set embedded ExampleL.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.L.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.L — DS.data.L","text":"","code":"data(ExampleL)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.M.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.M — DS.data.M","title":"DS.data.M — DS.data.M","text":"Data set embedded ExampleM.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.M.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.M — DS.data.M","text":"","code":"data(ExampleM)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.N.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.N — DS.data.N","title":"DS.data.N — DS.data.N","text":"Data set embedded ExampleN.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.N.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.N — DS.data.N","text":"","code":"data(ExampleN)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.O.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.O — DS.data.O","title":"DS.data.O — DS.data.O","text":"Data set embedded ExampleO.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.O.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.O — DS.data.O","text":"","code":"data(ExampleO)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.P.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.P — DS.data.P","title":"DS.data.P — DS.data.P","text":"Data set embedded ExampleP.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.P.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.P — DS.data.P","text":"","code":"data(ExampleP)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.Q.html","id":null,"dir":"Reference","previous_headings":"","what":"DS.data.Q — DS.data.Q","title":"DS.data.Q — DS.data.Q","text":"Data set embedded ExampleQ.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/DS.data.Q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DS.data.Q — DS.data.Q","text":"","code":"data(ExampleQ)"},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleA.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleA — ExampleA","title":"ExampleA — ExampleA","text":"Example data set data dictionary errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleA — ExampleA","text":"","code":"data(ExampleA)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleA — ExampleA","text":"R data file contains two objects: DD.dict.Data dictionary DS.data.Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleA — ExampleA","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example1.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.A <- readxl::read_xlsx(DD.path) path <- system.file(\"extdata\", \"DS_Example.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.A <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.A, DS.data.A, file = \"ExampleA.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleB.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleB — ExampleB","title":"ExampleB — ExampleB","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleB — ExampleB","text":"","code":"data(ExampleB)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleB.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleB — ExampleB","text":"R data file contains two objects: DD.dict.B Data dictionary DS.data.B Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleB.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleB — ExampleB","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example1b.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.B <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example1b.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.B <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.B, DS.data.B, file = \"ExampleB.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleC.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleC — ExampleC","title":"ExampleC — ExampleC","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleC — ExampleC","text":"","code":"data(ExampleC)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleC — ExampleC","text":"R data file contains two objects: DD.dict.C Data dictionary DS.data.C Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleC — ExampleC","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2d.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.C <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example1b.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.C <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.C, DS.data.C, file = \"ExampleC.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleD.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleD — ExampleD","title":"ExampleD — ExampleD","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleD — ExampleD","text":"","code":"data(ExampleD)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleD.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleD — ExampleD","text":"R data file contains two objects: DD.dict.D Data dictionary DS.data.D Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleD.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleD — ExampleD","text":"","code":"path <- system.file(\"extdata\", \"3b_SSM_DD_Example2f.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.D <- readxl::read_xlsx(path) DS.path <- system.file(\"extdata\", \"DS_Example.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.D <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.D, DS.data.D, file = \"ExampleD.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleE.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleE — ExampleE","title":"ExampleE — ExampleE","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleE — ExampleE","text":"","code":"data(ExampleE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleE — ExampleE","text":"R data file contains two objects: DD.dict.E Data dictionary DS.data.E Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleE.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleE — ExampleE","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2b.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.E <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example2.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.E <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.E, DS.data.E, file = \"ExampleE.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleF.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleF — ExampleF","title":"ExampleF — ExampleF","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleF — ExampleF","text":"","code":"data(ExampleF)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleF — ExampleF","text":"R data file contains two objects: DD.dict.F Data dictionary DS.data.F Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleF.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleF — ExampleF","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example4.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.F <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example3d.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.F <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.F, DS.data.F, file = \"ExampleF.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleG.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleG — ExampleG","title":"ExampleG — ExampleG","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleG — ExampleG","text":"","code":"data(ExampleG)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleG.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleG — ExampleG","text":"R data file contains two objects: DD.dict.G Data dictionary DS.data.G Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleG.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleG — ExampleG","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.G <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.G <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.G, DS.data.G, file = \"ExampleG.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleH.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleH — ExampleH","title":"ExampleH — ExampleH","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleH.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleH — ExampleH","text":"","code":"data(ExampleH)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleH.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleH — ExampleH","text":"R data file contains two objects: DD.dict.H Data dictionary DS.data.H Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleH.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleH — ExampleH","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example1.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.H <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example3c.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.H <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.H, DS.data.H, file = \"ExampleH.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleI.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleI — ExampleI","title":"ExampleI — ExampleI","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleI — ExampleI","text":"","code":"data(ExampleI)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleI.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleI — ExampleI","text":"R data file contains two objects: DD.dict.Data dictionary DS.data.Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleI.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleI — ExampleI","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2c.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.I <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example2c.txt\",package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.I <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.I, DS.data.I, file = \"ExampleI.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleJ.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleJ — ExampleJ","title":"ExampleJ — ExampleJ","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleJ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleJ — ExampleJ","text":"","code":"data(ExampleJ)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleJ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleJ — ExampleJ","text":"R data file contains two objects: DD.dict.J Data dictionary DS.data.J Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleJ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleJ — ExampleJ","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2d.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.J <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example2.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.J <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.J, DS.data.J, file = \"ExampleJ.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleK.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleK — ExampleK","title":"ExampleK — ExampleK","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleK — ExampleK","text":"","code":"data(ExampleK)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleK.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleK — ExampleK","text":"R data file contains two objects: DD.dict.K Data dictionary DS.data.K Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleK.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleK — ExampleK","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2d.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.K <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example2b.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.K <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.K, DS.data.K, file = \"ExampleK.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleL.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleL — ExampleL","title":"ExampleL — ExampleL","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleL — ExampleL","text":"","code":"data(ExampleL)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleL — ExampleL","text":"R data file contains two objects: DD.dict.L Data dictionary DS.data.L Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleL.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleL — ExampleL","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2b.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.L <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example2c.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.L <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.L, DS.data.L, file = \"ExampleL.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleM.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleM — ExampleM","title":"ExampleM — ExampleM","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleM — ExampleM","text":"","code":"data(ExampleM)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleM — ExampleM","text":"R data file contains two objects: DD.dict.M Data dictionary DS.data.M Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleM.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleM — ExampleM","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2b.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.M <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.M <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.M, DS.data.M, file = \"ExampleM.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleN.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleN — ExampleN","title":"ExampleN — ExampleN","text":"Example data set data dictionary intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleN — ExampleN","text":"","code":"data(ExampleN)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleN.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleN — ExampleN","text":"R data file contains two objects: DD.dict.N Data dictionary DS.data.N Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleN.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleN — ExampleN","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example2e.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.N <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.N <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.N, DS.data.N, file = \"ExampleN.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleO.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleO — ExampleO","title":"ExampleO — ExampleO","text":"Example data set intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleO.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleO — ExampleO","text":"","code":"data(ExampleO)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleO.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleO — ExampleO","text":"R data file contains single object: DS.data.O Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleO.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleO — ExampleO","text":"","code":"DS.path <- system.file(\"extdata\", \"DS_Example3.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.O <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DS.data.O, file = \"ExampleO.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleP.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleP — ExampleP","title":"ExampleP — ExampleP","text":"Example data set intentional errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleP — ExampleP","text":"","code":"data(ExampleP)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleP — ExampleP","text":"R data file contains single object: DS.data.P Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleP — ExampleP","text":"","code":"DS.path <- system.file(\"extdata\", \"DS_Example3b.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) DS.data.P <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DS.data.P, file = \"ExampleP.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleQ.html","id":null,"dir":"Reference","previous_headings":"","what":"ExampleQ — ExampleQ","title":"ExampleQ — ExampleQ","text":"Example data set data dictionary errors.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExampleQ — ExampleQ","text":"","code":"data(ExampleQ)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleQ.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ExampleQ — ExampleQ","text":"R data file contains two objects: DD.dict.Q Data dictionary DS.data.Q Data set","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/ExampleQ.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ExampleQ — ExampleQ","text":"","code":"DD.path <- system.file(\"extdata\", \"3b_SSM_DD_Example5.xlsx\", package = \"dbGaPCheckup\", mustWork=TRUE) DD.dict.Q <- readxl::read_xlsx(DD.path) DS.path <- system.file(\"extdata\", \"DS_Example5.txt\", package = \"dbGaPCheckup\", mustWork=TRUE) ### FIX THIS  DS.data.Q <- read.table(DS.path, header=TRUE, sep=\"\\t\", quote=\"\", as.is = TRUE) save(DD.dict.Q, DS.data.Q, file = \"ExampleQ.rda\")"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Value (NA) Check — NA_check","title":"Missing Value (NA) Check — NA_check","text":"Checks NA values data set; NA values present, also performs check NA value=meaning.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Value (NA) Check — NA_check","text":"","code":"NA_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Value (NA) Check — NA_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well number NA values observed data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Value (NA) Check — NA_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (number NA values data set information NA properly encoded value).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Value (NA) Check — NA_check","text":"","code":"# Example 1: Fail check data(ExampleK) NA_check(DD.dict.K, DS.data.K) #> $Message #> [1] \"Error: your data set contains NA values with no encoded NA value=meaning found. If you choose to retain NA values, NA must be specified as a missing value code in VALUES fields as a dbGaP requirement.\" #>  #> $Information #> [1] \"There are 112 NA values in your data set.\" #>  print(NA_check(DD.dict.K, DS.data.K, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function Status Message                            Infor…¹ #>   <dttm>              <chr>    <chr>  <chr>                              <named> #> 1 2023-01-18 11:48:19 NA_check Failed Error: your data set contains NA … <chr>   #> # … with abbreviated variable name ¹​Information  # Example 2: Pass check data(ExampleA) NA_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: no NA values detected in data set.\" #>  print(NA_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function Status Message                            Infor…¹ #>   <dttm>              <chr>    <chr>  <chr>                              <named> #> 1 2023-01-18 11:48:20 NA_check Passed Passed: no NA values detected in … <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Min Max Required Pre-checks — NA_precheck","title":"Min Max Required Pre-checks — NA_precheck","text":"function runs workflow minimum number checks required user run minmax_check; checks include pkg_field_check, dimension_check, name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min Max Required Pre-checks — NA_precheck","text":"","code":"NA_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min Max Required Pre-checks — NA_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min Max Required Pre-checks — NA_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/NA_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min Max Required Pre-checks — NA_precheck","text":"","code":"data(ExampleB) NA_precheck(DD.dict.B, DS.data.B) #> # A tibble: 4 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:20 field_check     Passed Passed: required fields VA… <lgl>   #> 2 2023-01-18 11:48:20 pkg_field_check Passed Passed: package-level requ… <lgl>   #> 3 2023-01-18 11:48:20 dimension_check Passed Passed: the variable count… <int>   #> 4 2023-01-18 11:48:20 name_check      Passed Passed: the variable names… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Missing Fields — add_missing_fields","title":"Add Missing Fields — add_missing_fields","text":"function adds additional fields required package including variable type (TYPE), minimum value (MIN), maximum value (MAX).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Missing Fields — add_missing_fields","text":"","code":"add_missing_fields(DD.dict, DS.data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Missing Fields — add_missing_fields","text":"DD.dict Data dictionary. DS.data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Missing Fields — add_missing_fields","text":"data frame containing updated data dictionary missing fields added , NULL required pre-checks fail.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Missing Fields — add_missing_fields","text":"Even though MIN, MAX, TYPE required dbGaP, package created use variables series checks awareness functions (e.g., render_report, values_check, etc.). MIN/MAX columns added empty columns dbGaP instructions state MIN MAX \"logical\" MIN/MAX data, necessarily observed MIN/MAX, study variable specific. TYPE inferred data set data dictionary VALUES columns. Note however, VALUES columns set correctly, function properly infer data TYPE data set data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/add_missing_fields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Missing Fields — add_missing_fields","text":"","code":"# Example data(ExampleD) DD.dict.updated <- add_missing_fields(DD.dict.D, DS.data.D) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\"  #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/check_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Report — check_report","title":"Check Report — check_report","text":"function generates user-readable report checks run complete_check function.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/check_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Report — check_report","text":"","code":"check_report(DD.dict, DS.data, non.NA.missing.codes = NA, compact = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/check_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Report — check_report","text":"DD.dict Data dictionary. DS.data Data set. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999). compact TRUE, function prints compact report, listing information non-passed checks.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/check_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Report — check_report","text":"Tibble, returned invisibly, containing following information check: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/check_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Report — check_report","text":"","code":"# Example 1: Incorrectly showing as pass check on first attempt data(ExampleB) report <- check_report(DD.dict.B, DS.data.B) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Passed Passed: unique description present for all variab… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Passed Passed: all missing value codes have a correspond… #> [1] \"All 15 checks passed.\" # Addition of missing value codes calls attention to error # at missing_value_check report <- check_report(DD.dict.B, DS.data.B, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status Message                                            #>    <chr>               <chr>  <chr>                                              #>  1 field_check         Passed Passed: required fields VARNAME, VARDESC, UNITS, … #>  2 pkg_field_check     Passed Passed: package-level required fields TYPE, MIN, … #>  3 dimension_check     Passed Passed: the variable count matches between the da… #>  4 name_check          Passed Passed: the variable names match between the data… #>  5 id_check            Passed Passed: All ID variable checks passed.             #>  6 row_check           Passed Passed: no blank or duplicate rows detected.       #>  7 NA_check            Passed Passed: no NA values detected in data set.         #>  8 type_check          Passed Passed: All TYPE entries found are accepted by db… #>  9 values_check        Passed Passed: all four VALUES checks look good.          #> 10 integer_check       Passed Passed: all variables listed as TYPE integer appe… #> 11 decimal_check       Passed Passed: all variables listed as TYPE decimal appe… #> 12 misc_format_check   Passed Passed: no check-specific formatting issues ident… #> 13 description_check   Passed Passed: unique description present for all variab… #> 14 minmax_check        Passed Passed: when provided, all variables are within t… #> 15 missing_value_check Failed ERROR: some variables have non-encoded missing va… #> -------------------- #> missing_value_check: Failed  #> ERROR: some variables have non-encoded missing value codes.  #> $missing_value_check.Info #>     VARNAME VALUE MEANING  PASS #> 14 CUFFSIZE -9999    <NA> FALSE #>  #> --------------------  # Example 2: Several fail checks or not attempted data(ExampleC) report <- check_report(DD.dict.C, DS.data.C, non.NA.missing.codes=c(-4444, -9999)) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Passed        Passed: package-level required fields TYPE… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Failed        ERROR: the variable names DO NOT match bet… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check name_check faile… #>  8 type_check          Passed        Passed: All TYPE entries found are accepte… #>  9 values_check        Passed        Passed: all four VALUES checks look good.   #> 10 integer_check       Not attempted ERROR: Required pre-check name_check faile… #> 11 decimal_check       Not attempted ERROR: Required pre-check name_check faile… #> 12 misc_format_check   Failed        ERROR: at least one check failed.           #> 13 description_check   Passed        Passed: unique description present for all… #> 14 minmax_check        Not attempted ERROR: Required pre-check name_check faile… #> 15 missing_value_check Not attempted ERROR: Required pre-check name_check faile… #> -------------------- #> name_check: Failed  #> ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.  #> $name_check.Info #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #> -------------------- #> misc_format_check: Failed  #> ERROR: at least one check failed.  #> $misc_formatting_check.Info #> # A tibble: 4 × 4 #>   check.name check.description                           check.status details    #>   <chr>      <chr>                                       <chr>        <chr>      #> 1 Check 1    Duplicate variable name check               Passed       NA         #> 2 Check 2    Check for use of `dbgap` in variable names  Failed       HTN_dbGaP  #> 3 Check 2    Check for use of `dbgap` in variable names  Failed       PHYSICAL_… #> 4 Check 4    Column names after `VALUES` should be empty Passed       NA         #>  #> -------------------- # Note you can also run report using compact=FALSE report <- check_report(DD.dict.C, DS.data.C, non.NA.missing.codes=c(-4444, -9999), compact = FALSE) #> # A tibble: 15 × 3 #>    Function            Status        Message                                     #>    <chr>               <chr>         <chr>                                       #>  1 field_check         Passed        Passed: required fields VARNAME, VARDESC, … #>  2 pkg_field_check     Passed        Passed: package-level required fields TYPE… #>  3 dimension_check     Passed        Passed: the variable count matches between… #>  4 name_check          Failed        ERROR: the variable names DO NOT match bet… #>  5 id_check            Passed        Passed: All ID variable checks passed.      #>  6 row_check           Passed        Passed: no blank or duplicate rows detecte… #>  7 NA_check            Not attempted ERROR: Required pre-check name_check faile… #>  8 type_check          Passed        Passed: All TYPE entries found are accepte… #>  9 values_check        Passed        Passed: all four VALUES checks look good.   #> 10 integer_check       Not attempted ERROR: Required pre-check name_check faile… #> 11 decimal_check       Not attempted ERROR: Required pre-check name_check faile… #> 12 misc_format_check   Failed        ERROR: at least one check failed.           #> 13 description_check   Passed        Passed: unique description present for all… #> 14 minmax_check        Not attempted ERROR: Required pre-check name_check faile… #> 15 missing_value_check Not attempted ERROR: Required pre-check name_check faile… #> -------------------- #> field_check: Passed  #> Passed: required fields VARNAME, VARDESC, UNITS, and VALUES present in the data dictionary.  #> $field_check.Info #> VARNAME VARDESC   UNITS  VALUES  #>    TRUE    TRUE    TRUE    TRUE  #>  #> -------------------- #> pkg_field_check: Passed  #> Passed: package-level required fields TYPE, MIN, and MAX present in the data dictionary.  #> $pkg_field_check.Info #> TYPE  MIN  MAX  #> TRUE TRUE TRUE  #>  #> -------------------- #> dimension_check: Passed  #> Passed: the variable count matches between the data dictionary and the data.  #> $dimension_check.Info #> Variables in dictionary       Variables in data  #>                      29                      29  #>  #> -------------------- #> name_check: Failed  #> ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.  #> $name_check.Info #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #> -------------------- #> id_check: Passed  #> Passed: All ID variable checks passed.  #> $id_check.Info #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Passed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Passed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Passed    No ill… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Passed    No lea… #> # … with abbreviated variable name ¹​check.status #>  #> -------------------- #> row_check: Passed  #> Passed: no blank or duplicate rows detected.  #> $row_check.Info #> $row_check.Info$empty_row_numbers #> character(0) #>  #> $row_check.Info$duplicated_row_numbers #> character(0) #>  #> $row_check.Info$duplicated_SUBJECT_ID #> integer(0) #>  #>  #> -------------------- #> NA_check: Not attempted  #> ERROR: Required pre-check name_check failed.  #> $NA_check.Info #> $NA_check.Info$Information #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #>  #> -------------------- #> type_check: Passed  #> Passed: All TYPE entries found are accepted by dbGaP per submission instructions.  #> $type_check.Info #> [1] \"integer\"                \"integer, encoded value\" \"decimal, encoded value\" #>  #> -------------------- #> values_check: Passed  #> Passed: all four VALUES checks look good.  #> $values_check.Info #>   check.name                                                 check.description #> 1    Check 1                 Is an equals sign present for all values columns? #> 2    Check 2 Are there any leading/trailing spaces near the first equals sign? #> 3    Check 3  Do all variables of TYPE encoded have at least one VALUES entry? #> 4    Check 4            Are all variables with VALUES entries of TYPE encoded? #>   check.status #> 1       Passed #> 2       Passed #> 3       Passed #> 4       Passed #>  #> -------------------- #> integer_check: Not attempted  #> ERROR: Required pre-check name_check failed.  #> $integer_check.Info #> $integer_check.Info$Information #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #>  #> -------------------- #> decimal_check: Not attempted  #> ERROR: Required pre-check name_check failed.  #> $decimal_check.Info #> $decimal_check.Info$Information #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #>  #> -------------------- #> misc_format_check: Failed  #> ERROR: at least one check failed.  #> $misc_formatting_check.Info #> # A tibble: 4 × 4 #>   check.name check.description                           check.status details    #>   <chr>      <chr>                                       <chr>        <chr>      #> 1 Check 1    Duplicate variable name check               Passed       NA         #> 2 Check 2    Check for use of `dbgap` in variable names  Failed       HTN_dbGaP  #> 3 Check 2    Check for use of `dbgap` in variable names  Failed       PHYSICAL_… #> 4 Check 4    Column names after `VALUES` should be empty Passed       NA         #>  #> -------------------- #> description_check: Passed  #> Passed: unique description present for all variables in the data dictionary.  #> $description_check.Info #> [1] \"NA. All variables have a description.\" #>  #> -------------------- #> minmax_check: Not attempted  #> ERROR: Required pre-check name_check failed.  #> $minmax_check.Info #> $minmax_check.Info$Information #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #>  #> -------------------- #> missing_value_check: Not attempted  #> ERROR: Required pre-check name_check failed.  #> $missing_value_check.Info #> $missing_value_check.Info$Information #> # A tibble: 2 × 2 #>   Data                    Dict                          #>   <chr>                   <chr>                         #> 1 Data: HTN               Dict: HTN_dbGaP               #> 2 Data: PHYSICAL_ACTIVITY Dict: PHYSICAL_ACTIVITY_dbGaP #>  #>  #> --------------------"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/complete_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete Check — complete_check","title":"Complete Check — complete_check","text":"function runs full workflow check including field_check, pkg_field_check, dimension_check, name_check, id_check, row_check, NA_check, type_check, values_check, integer_check, decimal_check, misc_format_check,  description_check, minmax_check, missing_value_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/complete_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete Check — complete_check","text":"","code":"complete_check(   DD_dict,   DS_data,   non.NA.missing.codes = NA,   reorder.dict = FALSE,   name.correct = FALSE )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/complete_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete Check — complete_check","text":"DD_dict Data dictionary. DS_data Data set. non.NA.missing.codes user-defined vector encoded, numerical (.e., non-NA) missing value codes (e.g., -9999). reorder.dict TRUE, names data data dictionary match perfectly wrong order, function reorder rows dictionary match columns data; note please use caution: recommend first running function default set FALSE understand potential errors. name.correct TRUE, name mismatches identified, function rename variable names data set match data dictionary; note please use caution: recommend first running function default set FALSE identify order/dimension mismatches (vs. name mismatches).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/complete_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete Check — complete_check","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed/Warning); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/complete_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complete Check — complete_check","text":"","code":"# Example 1 # Note in this example, the missing value codes are not defined, # so the last check ('missing_value_check') doesn't know to # to check for encoded values data(ExampleB) complete_check(DD.dict.B, DS.data.B) #> # A tibble: 15 × 5 #>    Time                Function            Status Message           Information  #>    <dttm>              <chr>               <chr>  <chr>             <named list> #>  1 2023-01-18 11:48:21 field_check         Passed Passed: required… <lgl [4]>    #>  2 2023-01-18 11:48:21 pkg_field_check     Passed Passed: package-… <lgl [3]>    #>  3 2023-01-18 11:48:21 dimension_check     Passed Passed: the vari… <int [2]>    #>  4 2023-01-18 11:48:21 name_check          Passed Passed: the vari… <chr [1]>    #>  5 2023-01-18 11:48:21 id_check            Passed Passed: All ID v… <tibble>     #>  6 2023-01-18 11:48:21 row_check           Passed Passed: no blank… <named list> #>  7 2023-01-18 11:48:21 NA_check            Passed Passed: no NA va… <chr [1]>    #>  8 2023-01-18 11:48:21 type_check          Passed Passed: All TYPE… <chr [3]>    #>  9 2023-01-18 11:48:21 values_check        Passed Passed: all four… <df [4 × 3]> #> 10 2023-01-18 11:48:21 integer_check       Passed Passed: all vari… <chr [0]>    #> 11 2023-01-18 11:48:21 decimal_check       Passed Passed: all vari… <chr [1]>    #> 12 2023-01-18 11:48:21 misc_format_check   Passed Passed: no check… <tibble>     #> 13 2023-01-18 11:48:21 description_check   Passed Passed: unique d… <chr [1]>    #> 14 2023-01-18 11:48:21 minmax_check        Passed Passed: when pro… <tibble>     #> 15 2023-01-18 11:48:21 missing_value_check Passed Passed: all miss… <df [0 × 4]> # Rerun check after defining missing value codes complete_check(DD.dict.B, DS.data.B, non.NA.missing.codes=c(-9999, -4444)) #> # A tibble: 15 × 5 #>    Time                Function            Status Message           Information  #>    <dttm>              <chr>               <chr>  <chr>             <named list> #>  1 2023-01-18 11:48:21 field_check         Passed Passed: required… <lgl [4]>    #>  2 2023-01-18 11:48:21 pkg_field_check     Passed Passed: package-… <lgl [3]>    #>  3 2023-01-18 11:48:21 dimension_check     Passed Passed: the vari… <int [2]>    #>  4 2023-01-18 11:48:21 name_check          Passed Passed: the vari… <chr [1]>    #>  5 2023-01-18 11:48:21 id_check            Passed Passed: All ID v… <tibble>     #>  6 2023-01-18 11:48:21 row_check           Passed Passed: no blank… <named list> #>  7 2023-01-18 11:48:21 NA_check            Passed Passed: no NA va… <chr [1]>    #>  8 2023-01-18 11:48:21 type_check          Passed Passed: All TYPE… <chr [3]>    #>  9 2023-01-18 11:48:21 values_check        Passed Passed: all four… <df [4 × 3]> #> 10 2023-01-18 11:48:21 integer_check       Passed Passed: all vari… <chr [0]>    #> 11 2023-01-18 11:48:21 decimal_check       Passed Passed: all vari… <chr [1]>    #> 12 2023-01-18 11:48:21 misc_format_check   Passed Passed: no check… <tibble>     #> 13 2023-01-18 11:48:21 description_check   Passed Passed: unique d… <chr [1]>    #> 14 2023-01-18 11:48:21 minmax_check        Passed Passed: when pro… <tibble>     #> 15 2023-01-18 11:48:21 missing_value_check Failed ERROR: some vari… <df [1 × 4]>  # Example 2 data(ExampleA) complete_check(DD.dict.A, DS.data.A, non.NA.missing.codes=c(-9999, -4444)) #> # A tibble: 15 × 5 #>    Time                Function            Status Message           Information  #>    <dttm>              <chr>               <chr>  <chr>             <named list> #>  1 2023-01-18 11:48:21 field_check         Passed Passed: required… <lgl [4]>    #>  2 2023-01-18 11:48:21 pkg_field_check     Passed Passed: package-… <lgl [3]>    #>  3 2023-01-18 11:48:21 dimension_check     Passed Passed: the vari… <int [2]>    #>  4 2023-01-18 11:48:21 name_check          Passed Passed: the vari… <chr [1]>    #>  5 2023-01-18 11:48:21 id_check            Passed Passed: All ID v… <tibble>     #>  6 2023-01-18 11:48:21 row_check           Passed Passed: no blank… <named list> #>  7 2023-01-18 11:48:21 NA_check            Passed Passed: no NA va… <chr [1]>    #>  8 2023-01-18 11:48:21 type_check          Passed Passed: All TYPE… <chr [3]>    #>  9 2023-01-18 11:48:21 values_check        Passed Passed: all four… <df [4 × 3]> #> 10 2023-01-18 11:48:21 integer_check       Passed Passed: all vari… <chr [0]>    #> 11 2023-01-18 11:48:21 decimal_check       Passed Passed: all vari… <chr [1]>    #> 12 2023-01-18 11:48:21 misc_format_check   Passed Passed: no check… <tibble>     #> 13 2023-01-18 11:48:21 description_check   Passed Passed: unique d… <chr [1]>    #> 14 2023-01-18 11:48:21 minmax_check        Passed Passed: when pro… <tibble>     #> 15 2023-01-18 11:48:21 missing_value_check Passed Passed: all miss… <df [0 × 4]>  # Example 3 data(ExampleD) results <- complete_check(DD.dict.D, DS.data.D, non.NA.missing.codes=c(-9999, -4444))   # View output in greater detail results$Message[2] # Recommend using add_missing_fields #> [1] \"ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.\" results$Information$pkg_field_check.Info # We see that MIN, MAX, and TYPE are all missing #>  TYPE   MIN   MAX  #> FALSE FALSE FALSE  # Use the add_missing_fields function to add in data DD.dict.updated <- add_missing_fields(DD.dict.D, DS.data.D) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\"  #>  # Be sure to call in the new version of the dictionary (DD.dict.updated) complete_check(DD.dict.updated, DS.data.D) #> # A tibble: 15 × 5 #>    Time                Function            Status Message           Information  #>    <dttm>              <chr>               <chr>  <chr>             <named list> #>  1 2023-01-18 11:48:21 field_check         Passed Passed: required… <lgl [4]>    #>  2 2023-01-18 11:48:21 pkg_field_check     Passed Passed: package-… <lgl [3]>    #>  3 2023-01-18 11:48:21 dimension_check     Passed Passed: the vari… <int [2]>    #>  4 2023-01-18 11:48:21 name_check          Passed Passed: the vari… <chr [1]>    #>  5 2023-01-18 11:48:21 id_check            Passed Passed: All ID v… <tibble>     #>  6 2023-01-18 11:48:21 row_check           Passed Passed: no blank… <named list> #>  7 2023-01-18 11:48:21 NA_check            Passed Passed: no NA va… <chr [1]>    #>  8 2023-01-18 11:48:21 type_check          Passed Passed: All TYPE… <chr [3]>    #>  9 2023-01-18 11:48:21 values_check        Passed Passed: all four… <df [4 × 3]> #> 10 2023-01-18 11:48:21 integer_check       Passed Passed: all vari… <chr [0]>    #> 11 2023-01-18 11:48:21 decimal_check       Passed Passed: all vari… <chr [1]>    #> 12 2023-01-18 11:48:21 misc_format_check   Passed Passed: no check… <tibble>     #> 13 2023-01-18 11:48:21 description_check   Failed ERROR: missing a… <tibble>     #> 14 2023-01-18 11:48:21 minmax_check        Passed Passed: when pro… <tibble>     #> 15 2023-01-18 11:48:21 missing_value_check Passed Passed: all miss… <df [0 × 4]>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_awareness_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Awareness Report — create_awareness_report","title":"Create Awareness Report — create_awareness_report","text":"function generates awareness report HTML format, optionally opens web browser.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_awareness_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Awareness Report — create_awareness_report","text":"","code":"create_awareness_report(   DD.dict,   DS.data,   non.NA.missing.codes = NA,   threshold = 95,   output.path = tempdir(),   open.html = TRUE,   fn.stem = \"AwarenessReport\" )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_awareness_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Awareness Report — create_awareness_report","text":"DD.dict Data dictionary. DS.data Data set. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999). threshold Threshold missingness concern (percent). output.path Path folder create HTML report document. open.html TRUE, open HTML report document web browser. fn.stem File name stem.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_awareness_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Awareness Report — create_awareness_report","text":"Full path HTML report document.","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_awareness_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Awareness Report — create_awareness_report","text":"","code":"# \\donttest{ data(ExampleB) create_awareness_report(DD.dict.B, DS.data.B, non.NA.missing.codes=c(-9999),    output.path= tempdir(), open.html = FALSE) #>  #>  #> processing file: dbGaP_awareness_report.Rmd #>    |                                                                               |                                                                      |   0%   |                                                                               |....                                                                  |   6% #>    inline R code fragments #>  #>    |                                                                               |........                                                              |  11% #> label: su (with options)  #> List of 3 #>  $ echo   : logi FALSE #>  $ message: logi FALSE #>  $ warning: logi FALSE #>  #> Loading required package: knitr #>    |                                                                               |............                                                          |  17% #>   ordinary text without R code #>  #>    |                                                                               |................                                                      |  22% #> label: param #>    |                                                                               |...................                                                   |  28% #>   ordinary text without R code #>  #>    |                                                                               |.......................                                               |  33% #> label: misssum #>    |                                                                               |...........................                                           |  39% #>   ordinary text without R code #>  #>    |                                                                               |...............................                                       |  44% #> label: vmt1a (with options)  #> List of 1 #>  $ echo: logi FALSE #>  #>    |                                                                               |...................................                                   |  50% #>   ordinary text without R code #>  #>    |                                                                               |.......................................                               |  56% #> label: vmt2b (with options)  #> List of 1 #>  $ echo: logi FALSE #>  #>    |                                                                               |...........................................                           |  61% #>   ordinary text without R code #>  #>    |                                                                               |...............................................                       |  67% #> label: vmt3c (with options)  #> List of 1 #>  $ echo: logi FALSE #>  #>    |                                                                               |...................................................                   |  72% #>   ordinary text without R code #>  #>    |                                                                               |......................................................                |  78% #> label: vmt4d (with options)  #> List of 1 #>  $ echo: logi FALSE #>  #>    |                                                                               |..........................................................            |  83% #>   ordinary text without R code #>  #>    |                                                                               |..............................................................        |  89% #> label: vmt4e (with options)  #> List of 1 #>  $ echo: logi FALSE #>  #>    |                                                                               |..................................................................    |  94% #>   ordinary text without R code #>  #>    |                                                                               |......................................................................| 100% #> label: sess_inf #>  #> output file: dbGaP_awareness_report.knit.md #> /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/pandoc +RTS -K512m -RTS dbGaP_awareness_report.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/AwarenessReport-20230118_114822.html --lua-filter /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --template /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --number-sections --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/rmarkdown-str8b4ece18525.html  #>  #> Output created: /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/AwarenessReport-20230118_114822.html #> [1] \"/var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/AwarenessReport-20230118_114822.html\" # }"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Report — create_report","title":"Create Report — create_report","text":"function calls eval_function generate textual graphical report selected variables HTML format, optionally opens web browser.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Report — create_report","text":"","code":"create_report(   DD.dict,   DS.data,   sex.split = FALSE,   sex.name = NULL,   start = 1,   end = 1,   non.NA.missing.codes = NA,   output.path = tempdir(),   open.html = TRUE,   fn.stem = \"Report\" )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Report — create_report","text":"DD.dict Data dictionary. DS.data Data set. sex.split TRUE, split reports field named defined sex.name variable. sex.name Character string specifying name sex field. start Staring index first select trait. end Ending index last selected trait. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999). output.path Path folder create HTML report document. open.html TRUE, open HTML report document web browser. fn.stem File name stem.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Report — create_report","text":"Full path HTML report document.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/create_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Report — create_report","text":"","code":"# \\donttest{ data(ExampleB) create_report(DD.dict.B, DS.data.B, sex.split=TRUE, sex.name= \"SEX\",    start = 3, end = 7, non.NA.missing.codes=c(-9999,-4444),    output.path= tempdir(), open.html = FALSE) #>  #>  #> processing file: dbGaP_check_report.Rmd #>    |                                                                               |                                                                      |   0%   |                                                                               |......                                                                |   9% #>    inline R code fragments #>  #>    |                                                                               |.............                                                         |  18% #> label: set (with options)  #> List of 3 #>  $ echo   : logi FALSE #>  $ message: logi FALSE #>  $ warning: logi FALSE #>  #>    |                                                                               |...................                                                   |  27% #>   ordinary text without R code #>  #>    |                                                                               |.........................                                             |  36% #> label: ll (with options)  #> List of 1 #>  $ message: logi FALSE #>  #>    |                                                                               |................................                                      |  45% #>   ordinary text without R code #>  #>    |                                                                               |......................................                                |  55% #> label: parameters #>    |                                                                               |.............................................                         |  64% #>   ordinary text without R code #>  #>    |                                                                               |...................................................                   |  73% #> label: applyfun5 (with options)  #> List of 1 #>  $ results: chr \"asis\" #>  #>    |                                                                               |.........................................................             |  82% #>   ordinary text without R code #>  #>    |                                                                               |................................................................      |  91% #> label: si #>    |                                                                               |......................................................................| 100% #>   ordinary text without R code #>  #>  #> output file: dbGaP_check_report.knit.md #> /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/pandoc +RTS -K512m -RTS dbGaP_check_report.knit.md --to html4 --from markdown+autolink_bare_uris+tex_math_single_backslash --output /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/Report-20230118_114822.html --lua-filter /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmarkdown/lua/pagebreak.lua --lua-filter /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmarkdown/lua/latex-div.lua --embed-resources --standalone --variable bs3=TRUE --section-divs --table-of-contents --toc-depth 3 --template /Users/law145/Library/R/arm64/4.2/library/rmarkdown/rmd/h/default.html --no-highlight --variable highlightjs=1 --number-sections --variable theme=bootstrap --mathjax --variable 'mathjax-url=https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --include-in-header /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/rmarkdown-str8b4e70a7cb4a.html  #>  #> Output created: /var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/Report-20230118_114822.html #> [1] \"/var/folders/y1/p2tdt78d16b191mrhv6hsm0c0000gq/T//RtmpuvtXSL/Report-20230118_114822.html\" # }"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Utility Function — dat_function","title":"Data Utility Function — dat_function","text":"function calls eval_function generate textual graphical report selected variables.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Utility Function — dat_function","text":"","code":"dat_function(   DS.dataset,   DD.dictionary,   sex.split = FALSE,   sex.name = NULL,   DS.dataset.na )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Utility Function — dat_function","text":"DS.dataset Data set. DD.dictionary Data dictionary. sex.split TRUE, split reports field named sex.name string. sex.name Character string giving name sex field. DS.dataset.na Data set missing values set NA.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Utility Function — dat_function","text":"Invisible NULL, called side effects.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function_selected.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Selected Utility Function — dat_function_selected","title":"Data Selected Utility Function — dat_function_selected","text":"function calls eval_function generate textual graphical report selected variables.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function_selected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Selected Utility Function — dat_function_selected","text":"","code":"dat_function_selected(   dataset,   dictionary,   sex.split = FALSE,   sex.name = NULL,   start = 1,   end = 1,   dataset.na,   h.level = 2 )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function_selected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Selected Utility Function — dat_function_selected","text":"dataset Data set. dictionary Data dictionary. sex.split TRUE, split reports field named 'Sex'. sex.name Character string giving name sex field. start Staring index first selected trait. end Ending index last selected trait. dataset.na Data set missing values set NA. h.level Header level pandoc function.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dat_function_selected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Selected Utility Function — dat_function_selected","text":"Invisible NULL, called side effects","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dbGaPCheckup-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dbGaPCheckup: dbGaP Checkup — dbGaPCheckup-package","title":"dbGaPCheckup: dbGaP Checkup — dbGaPCheckup-package","text":"Contains functions check formatting Subject Phenotype data set data dictionary specified National Center Biotechnology Information (NCBI) Database Genotypes Phenotypes (dbGaP) https://www.ncbi.nlm.nih.gov/gap/docs/submissionguide/.","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dbGaPCheckup-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dbGaPCheckup: dbGaP Checkup — dbGaPCheckup-package","text":"Maintainer: Lacey W. Heinsberg law145@pitt.edu Authors: Daniel E. Weeks weeks@pitt.edu contributors: University Pittsburgh [copyright holder]","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/decimal_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Decimal Check — decimal_check","title":"Decimal Check — decimal_check","text":"function searches variables appear incorrectly listed TYPE decimal.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/decimal_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decimal Check — decimal_check","text":"","code":"decimal_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/decimal_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decimal Check — decimal_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list variables may incorrectly labeled TYPE decimal.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/decimal_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decimal Check — decimal_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Names variables listed TYPE decimal, appear decimals).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/decimal_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decimal Check — decimal_check","text":"","code":"# Example 1: Fail check data(ExampleF) decimal_check(DD.dict.F, DS.data.F) #> $Message #> [1] \"ERROR: some variables listed as TYPE decimal do not appear to be decimals.\" #>  #> $Information #> [1] \"PERCEIVED_HEALTH\" #>  print(integer_check(DD.dict.F, DS.data.F, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function      Status Message                       Infor…¹ #>   <dttm>              <chr>         <chr>  <chr>                         <named> #> 1 2023-01-18 11:48:27 integer_check Failed ERROR: some variables listed… <chr>   #> # … with abbreviated variable name ¹​Information  # Example 2: Required pre-check fails data(ExampleE) decimal_check(DD.dict.E, DS.data.E) #> $Note #> [1] \"Pre-check failed.\" #>  #> $Message #> # A tibble: 2 × 2 #>   `r$Function`    `r$Message`                                                    #>   <chr>           <chr>                                                          #> 1 pkg_field_check Passed: package-level required fields TYPE, MIN, and MAX pres… #> 2 dimension_check ERROR: the variable count differs between the data dictionary… #>  #> $Information #> $Information$Information #> $Information$Information$var.dim #> Variables in dictionary       Variables in data  #>                      30                      29  #>  #> $Information$Information$mismatches #>   col_no                    Data        Dictionary #> 1     18               HTN_dbGaP      BP_DIASTOLIC #> 2     19              SMOKING_HX               HTN #> 3     22 PHYSICAL_ACTIVITY_dbGaP        HEART_RATE #> 4     26           HX_DEPRESSION        HX_ANXIETY #> 5      5                  HEIGHT          PREGNANT #> 6     20    LENGTH_SMOKING_YEARS   SMOKING_HISTORY #> 7     23                   HX_DM PHYSICAL_ACTIVITY #> 8     27          SOCIAL_SUPPORT     DEPRESSION_HX #>  #> $Information$Information$NamesMissingFromDictionary #> [1] \"HTN_dbGaP\"               \"SMOKING_HX\"              #> [3] \"PHYSICAL_ACTIVITY_dbGaP\" \"HX_DEPRESSION\"           #>  #> $Information$Information$NamesMissingFromData #> [1] \"PREGNANT\"          \"HTN\"               \"SMOKING_HISTORY\"   #> [4] \"PHYSICAL_ACTIVITY\" \"DEPRESSION_HX\"     #>  #>  #>  print(decimal_check(DD.dict.E, DS.data.E, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function      Status        Message           Information  #>   <dttm>              <chr>         <chr>         <chr>             <named list> #> 1 2023-01-18 11:48:27 decimal_check Not attempted ERROR: Required … <named list>  # Example 3: Pass check data(ExampleA) decimal_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: all variables listed as TYPE decimal appear to be decimals.\" #>  print(decimal_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function      Status Message                       Infor…¹ #>   <dttm>              <chr>         <chr>  <chr>                         <named> #> 1 2023-01-18 11:48:27 decimal_check Passed Passed: all variables listed… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/description_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Description Check — description_check","title":"Description Check — description_check","text":"function checks unique description every variable data dictionary (VARDESC column).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/description_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description Check — description_check","text":"","code":"description_check(DD.dict, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/description_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description Check — description_check","text":"DD.dict Data dictionary. verbose TRUE, function prints Message , well list variables missing VARDESC duplicated VARDESC.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/description_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Description Check — description_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Names variables missing duplicated descriptions).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/description_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Description Check — description_check","text":"","code":"# Example 1: Fail check  data(ExampleG) description_check(DD.dict.G) #> $Message #> [1] \"ERROR: missing and duplicate descriptions found in data dictionary.\" #>  #> $Information #> # A tibble: 4 × 2 #>   VARNAME  VARDESC               #>   <chr>    <chr>                 #> 1 PREGNANT NA                    #> 2 REACT    NA                    #> 3 HEIGHT   Height of participant #> 4 WEIGHT   Height of participant #>  print(description_check(DD.dict.G, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function          Status Message                  Inform…¹ #>   <dttm>              <chr>             <chr>  <chr>                    <named > #> 1 2023-01-18 11:48:27 description_check Failed ERROR: missing and dupl… <tibble> #> # … with abbreviated variable name ¹​Information  # Example 2: Pass check data(ExampleA) description_check(DD.dict.A) #> $Message #> [1] \"Passed: unique description present for all variables in the data dictionary.\" #>  print(description_check(DD.dict.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function          Status Message                   Infor…¹ #>   <dttm>              <chr>             <chr>  <chr>                     <named> #> 1 2023-01-18 11:48:27 description_check Passed Passed: unique descripti… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dictionary_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Dictionary Search — dictionary_search","title":"Data Dictionary Search — dictionary_search","text":"awareness function helps search data dictionary specific term; intended use investigative aid supplement checks package.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dictionary_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Dictionary Search — dictionary_search","text":"","code":"dictionary_search(   DD.dict,   search.term = c(\"blood pressure\"),   search.column = c(\"VARDESC\") )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dictionary_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Dictionary Search — dictionary_search","text":"DD.dict Data dictionary. search.term Search term. search.column Column data dictionary search.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dictionary_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Dictionary Search — dictionary_search","text":"Tibble containing dictionary rows search term detected specified column error message search column detected.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dictionary_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Dictionary Search — dictionary_search","text":"","code":"# Successful search data(ExampleB) dictionary_search(DD.dict.B, search.term=c(\"skinfold\"), search.column=c(\"VARDESC\")) #> # A tibble: 2 × 21 #>   VARNAME VARDESC        DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>   <chr>          <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 ABD_SKF Abdominal ski… NA      inte… mm       NA    NA NA      NA      NA      #> 2 SUP_SKF Suprailiac sk… NA      inte… mm       NA    NA NA      NA      NA      #> # … with 11 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, and #> #   abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, ³​COMMENT2 # Attempted search in wrong column dictionary_search(DD.dict.B, search.term=c(\"skinfold\"), search.column=c(\"VARIABLE_DESCRIPTION\")) #> [1] \"ERROR: VARIABLE_DESCRIPTION is not a column name in the data dictionary.\""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dimension_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimension Check — dimension_check","title":"Dimension Check — dimension_check","text":"function checks number variables match data set data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dimension_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimension Check — dimension_check","text":"","code":"dimension_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dimension_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimension Check — dimension_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well number variables data set data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dimension_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimension Check — dimension_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (number variables data dictionary names mismatched variables applicable).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dimension_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimension Check — dimension_check","text":"","code":"# Example 1: Fail check data(ExampleG) dimension_check(DD.dict.G, DS.data.G) #> $Status #> [1] \"Failed\" #>  #> $var.dim #> Variables in dictionary       Variables in data  #>                      31                      30  #>  #> $mismatches #>   col_no          Data      Dictionary #> 1     20    SMOKING_HX SMOKING_HISTORY #> 2     27 HX_DEPRESSION   DEPRESSION_HX #> 3     31          <NA>    GENETIC_DATA #>  #> $NamesMissingFromDictionary #> [1] \"SMOKING_HX\"    \"HX_DEPRESSION\" #>  #> $NamesMissingFromData #> [1] \"SMOKING_HISTORY\" \"DEPRESSION_HX\"   \"GENETIC_DATA\"    #>  print(dimension_check(DD.dict=DD.dict.G, DS.data=DS.data.G,verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function        Status Message                Information  #>   <dttm>              <chr>           <chr>  <chr>                  <named list> #> 1 2023-01-18 11:48:27 dimension_check Failed ERROR: the variable c… <named list>  # Example 2: Pass check data(ExampleA) dimension_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: the variable count matches between the data dictionary and the data.\" #>  #> $Information #> Variables in dictionary       Variables in data  #>                      30                      30  #>  print(dimension_check(DD.dict.A, DS.data.A,verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:27 dimension_check Passed Passed: the variable count… <int>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dup_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate Values Function — dup_values","title":"Duplicate Values Function — dup_values","text":"function checks duplicate VALUES column names data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dup_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate Values Function — dup_values","text":"","code":"dup_values(DD.dict)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dup_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duplicate Values Function — dup_values","text":"DD.dict Data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/dup_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duplicate Values Function — dup_values","text":"Logical, TRUE one VALUES column detected.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/eval_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation Utility Function — eval_function","title":"Evaluation Utility Function — eval_function","text":"function generates textual graphical report selected variables.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/eval_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation Utility Function — eval_function","text":"","code":"eval_function(   dataset,   dictionary,   sex.split = FALSE,   sex.name = NULL,   dataset.na,   h.level = 2 )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/eval_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation Utility Function — eval_function","text":"dataset Data set. dictionary Data dictionary. sex.split TRUE, split reports field named 'Sex'. sex.name Name Sex field. dataset.na Data set missing values set NA. h.level Header level pandoc function.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/eval_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluation Utility Function — eval_function","text":"Invisible NULL, called side effects.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/field_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Field Check — field_check","title":"Field Check — field_check","text":"function checks dbGaP required fields variable name (VARNAME), variable description (VARDESC), units (UNITS), variable value meaning (VALUES).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/field_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Field Check — field_check","text":"","code":"field_check(DD.dict, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/field_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Field Check — field_check","text":"DD.dict Data dictionary. verbose TRUE, function prints Message , well list fields found data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/field_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Field Check — field_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Named vector TRUE/FALSE values alerting user checks passed (TRUE) failed (FALSE) VARNAME, VARDESC, UNITS, VALUE).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/field_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Field Check — field_check","text":"","code":"data(ExampleA) field_check(DD.dict.A) #> $Message #> [1] \"Passed: required fields VARNAME, VARDESC, UNITS, and VALUES present in the data dictionary.\" #>  print(field_check(DD.dict.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function    Status Message                         Infor…¹ #>   <dttm>              <chr>       <chr>  <chr>                           <named> #> 1 2023-01-18 11:48:28 field_check Passed Passed: required fields VARNAM… <lgl>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":null,"dir":"Reference","previous_headings":"","what":"ID Check — id_check","title":"ID Check — id_check","text":"function checks first column data set primary ID participant labeled SUBJECT_ID values contain illegal characters padded zeros.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ID Check — id_check","text":"","code":"id_check(DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ID Check — id_check","text":"DS.data Data set. verbose TRUE, function prints Message , well detailed diagnostic information.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ID Check — id_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Detailed information four ID checks performed).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ID Check — id_check","text":"Subject IDs integer string value. Integers zero padding. IDs spaces. Specifically, following characters can included ID: English letters, Arabic numerals, period (.), hyphen (-), underscore (_), symbol (@), pound sign (#).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ID Check — id_check","text":"","code":"# Example 1: Fail check, 'SUBJECT_ID' not present data(ExampleO) id_check(DS.data.O) #> $Message #> [1] \"ERROR: not all ID variable requirements are met. See Information for more details.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Failed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Failed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Failed    Checks… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Failed    Checks… #> # … with abbreviated variable name ¹​check.status #>  print(id_check(DS.data.O, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function Status Message                           Inform…¹ #>   <dttm>              <chr>    <chr>  <chr>                             <named > #> 1 2023-01-18 11:48:28 id_check Failed ERROR: not all ID variable requi… <tibble> #> # … with abbreviated variable name ¹​Information  # Example 2: Fail check, 'SUBJECT_ID' includes illegal spaces data(ExampleP) id_check(DS.data.P) #> $Message #> [1] \"ERROR: not all ID variable requirements are met. See Information for more details.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Passed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Passed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Failed    Illega… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Passed    No lea… #> # … with abbreviated variable name ¹​check.status #>  results <- id_check(DS.data.P) #> $Message #> [1] \"ERROR: not all ID variable requirements are met. See Information for more details.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Passed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Passed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Failed    Illega… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Passed    No lea… #> # … with abbreviated variable name ¹​check.status #>  results$Information[[1]]$details #> [1] \"The first column name is SUBJECT_ID.\"                                                                                                                                                                                                                 #> [2] \"'SUBJECT_ID' is the name of column 1.\"                                                                                                                                                                                                                #> [3] \"Illegal characters detected in 'SUBJECT_ID' for 100 row(s). SUBJECT_ID may contain only: English letters, Arabic numerals, period (.), hyphen (-), underscore (_), at symbol (@), and the pound sign (#). No spaces or other characters are allowed.\" #> [4] \"No leading zeros detected in 'SUBJECT_ID'.\"                                                                                                                                                                                                           print(id_check(DS.data.P, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function Status Message                           Inform…¹ #>   <dttm>              <chr>    <chr>  <chr>                             <named > #> 1 2023-01-18 11:48:28 id_check Failed ERROR: not all ID variable requi… <tibble> #> # … with abbreviated variable name ¹​Information  # Example 3: Pass check data(ExampleA) id_check(DS.data.A) #> $Message #> [1] \"Passed: All ID variable checks passed.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                                 check.s…¹ details #>   <chr>      <chr>                                             <chr>     <chr>   #> 1 Check 1    Column 1 is labeled as 'SUBJECT_ID'.              Passed    The fi… #> 2 Check 2    'SUBJECT_ID' is a column name in the data set.    Passed    'SUBJE… #> 3 Check 3    'SUBJECT_ID' is a column name in the data set.    Passed    No ill… #> 4 Check 4    No leading zeros detected in 'SUBJECT_ID' column. Passed    No lea… #> # … with abbreviated variable name ¹​check.status #>  print(id_check(DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function Status Message                           Inform…¹ #>   <dttm>              <chr>    <chr>  <chr>                             <named > #> 1 2023-01-18 11:48:28 id_check Passed Passed: All ID variable checks p… <tibble> #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"utility function reorders data set SUBJECT_ID comes first.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"","code":"id_first_data(DS.data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"DS.data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"Updated data set SUBJECT_ID first column.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"SUBJECT_ID required first column data set first variable listed data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relocate SUBJECT_ID to First Column of Data Set — id_first_data","text":"","code":"data(ExampleQ) head(DS.data.Q) #>   SAMPLE_ID SUBJECT_ID REACT AGE SEX PREGNANT     HEIGHT  WEIGHT         BMI #> 1      1001          1    40  33   0    -4444   163.5000    54.4    20.34995 #> 2      1002          2    45  45   1        0   159.3369    93.2    36.70990 #> 3      1003          3    55  34   0    -4444   185.0000    95.0    27.75749 #> 4     -9999          4    56  55   0    -4444   171.5000    85.7    29.13752 #> 5      1005          5    64  45   0    -4444   180.0000   101.4    31.29630 #> 6      1006          6 -9999  46   1        0 -9999.0000 -9999.0 -9999.00000 #>   OBESITY    ABD_CIRC   HIP_CIRC ABD_SKF SUP_SKF RESIST CUFFSIZE BP_SYSTOLIC #> 1       0   116.08677   119.2750      28      23    340        0         120 #> 2       1   110.39444   115.8551      24      27    354        3         110 #> 3       0   104.29832   104.4375      29      25    358        1         106 #> 4       0   121.77705   118.4763      51      44    389        1         158 #> 5       1    84.14132   104.6367      42      25    356        2         169 #> 6   -9999 -9999.00000 -9999.0000   -9999   -9999  -9999        0         105 #>   BP_DIASTOLIC HTN SMOKING_HX LENGTH_SMOKING_YEARS HEART_RATE PHYSICAL_ACTIVITY #> 1           80   0          0              -4444.0         50               360 #> 2           60   0      -9999              -4444.0         54                 0 #> 3           50   0          1                  1.5         75               100 #> 4           95   1          0              -4444.0         90               180 #> 5          100   1          1                 14.0         85             -9999 #> 6           40   0          1                 25.0         72               180 #>   HX_DM HX_STROKE HX_ANXIETY HX_DEPRESSION SOCIAL_SUPPORT PERCEIVED_CONFLICT #> 1     0         0          1             1              1                 25 #> 2     1         0          0             0              5                 25 #> 3 -9999         0      -9999         -9999              4                 24 #> 4     1         0          0             0              2                 10 #> 5     1     -9999          0             0              3                  5 #> 6     0         0          0             0              4                  1 #>   PERCEIVED_HEALTH #> 1               10 #> 2                4 #> 3                8 #> 4                5 #> 5                6 #> 6                7 DS.data.updated <- id_first_data(DS.data.Q) head(DS.data.updated) #>   SUBJECT_ID SAMPLE_ID REACT AGE SEX PREGNANT     HEIGHT  WEIGHT         BMI #> 1          1      1001    40  33   0    -4444   163.5000    54.4    20.34995 #> 2          2      1002    45  45   1        0   159.3369    93.2    36.70990 #> 3          3      1003    55  34   0    -4444   185.0000    95.0    27.75749 #> 4          4     -9999    56  55   0    -4444   171.5000    85.7    29.13752 #> 5          5      1005    64  45   0    -4444   180.0000   101.4    31.29630 #> 6          6      1006 -9999  46   1        0 -9999.0000 -9999.0 -9999.00000 #>   OBESITY    ABD_CIRC   HIP_CIRC ABD_SKF SUP_SKF RESIST CUFFSIZE BP_SYSTOLIC #> 1       0   116.08677   119.2750      28      23    340        0         120 #> 2       1   110.39444   115.8551      24      27    354        3         110 #> 3       0   104.29832   104.4375      29      25    358        1         106 #> 4       0   121.77705   118.4763      51      44    389        1         158 #> 5       1    84.14132   104.6367      42      25    356        2         169 #> 6   -9999 -9999.00000 -9999.0000   -9999   -9999  -9999        0         105 #>   BP_DIASTOLIC HTN SMOKING_HX LENGTH_SMOKING_YEARS HEART_RATE PHYSICAL_ACTIVITY #> 1           80   0          0              -4444.0         50               360 #> 2           60   0      -9999              -4444.0         54                 0 #> 3           50   0          1                  1.5         75               100 #> 4           95   1          0              -4444.0         90               180 #> 5          100   1          1                 14.0         85             -9999 #> 6           40   0          1                 25.0         72               180 #>   HX_DM HX_STROKE HX_ANXIETY HX_DEPRESSION SOCIAL_SUPPORT PERCEIVED_CONFLICT #> 1     0         0          1             1              1                 25 #> 2     1         0          0             0              5                 25 #> 3 -9999         0      -9999         -9999              4                 24 #> 4     1         0          0             0              2                 10 #> 5     1     -9999          0             0              3                  5 #> 6     0         0          0             0              4                  1 #>   PERCEIVED_HEALTH #> 1               10 #> 2                4 #> 3                8 #> 4                5 #> 5                6 #> 6                7"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"utility function reorders data dictionary SUBJECT_ID comes first.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"","code":"id_first_dict(DD.dict)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"DD.dict Data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"Updated data dictionary SUBJECT_ID first variable.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"SUBJECT_ID required first column data set first variable listed data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/id_first_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relocate SUBJECT_ID to First Column of Data Dictionary — id_first_dict","text":"","code":"data(ExampleQ) head(DD.dict.Q) #> # A tibble: 6 × 22 #>   VARNAME    VARDESC     DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>      <chr>       <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 SAMPLE_ID  Sample ID   NA      inte… NA       NA    NA NA      NA      NA      #> 2 AGE        Age at enr… NA      inte… years    NA    NA NA      NA      NA      #> 3 SEX        Sex assign… NA      inte… NA        0     1 NA      NA      NA      #> 4 SUBJECT_ID Participan… NA      inte… NA       NA    NA NA      NA      NA      #> 5 PREGNANT   Pregnancy … NA      inte… NA        0     1 NA      NA      NA      #> 6 HEIGHT     Height of … NA      deci… cm       NA    NA NA      NA      NA      #> # … with 12 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, #> #   ...22 <chr>, and abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, #> #   ³​COMMENT2 DD.dict.updated <- id_first_dict(DD.dict.Q) head(DD.dict.updated) #> # A tibble: 6 × 22 #>   VARNAME    VARDESC     DOCFILE TYPE  UNITS   MIN   MAX RESOL…¹ COMME…² COMME…³ #>   <chr>      <chr>       <lgl>   <chr> <chr> <dbl> <dbl> <lgl>   <lgl>   <lgl>   #> 1 SUBJECT_ID Participan… NA      inte… NA       NA    NA NA      NA      NA      #> 2 SAMPLE_ID  Sample ID   NA      inte… NA       NA    NA NA      NA      NA      #> 3 AGE        Age at enr… NA      inte… years    NA    NA NA      NA      NA      #> 4 SEX        Sex assign… NA      inte… NA        0     1 NA      NA      NA      #> 5 PREGNANT   Pregnancy … NA      inte… NA        0     1 NA      NA      NA      #> 6 HEIGHT     Height of … NA      deci… cm       NA    NA NA      NA      NA      #> # … with 12 more variables: VARIABLE_SOURCE <lgl>, SOURCE_VARIABLE_ID <lgl>, #> #   VARIABLE_MAPPING <lgl>, UNIQUEKEY <lgl>, COLLINTERVAL <lgl>, ORDER <lgl>, #> #   VALUES <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>, #> #   ...22 <chr>, and abbreviated variable names ¹​RESOLUTION, ²​COMMENT1, #> #   ³​COMMENT2"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/int_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer Check Base Function — int_check","title":"Integer Check Base Function — int_check","text":"function checks integer values.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/int_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer Check Base Function — int_check","text":"","code":"int_check(data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/int_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer Check Base Function — int_check","text":"data Number vector numbers.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/int_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer Check Base Function — int_check","text":"Logical, TRUE non-missing entries input vector integers.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/integer_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Integer Check — integer_check","title":"Integer Check — integer_check","text":"function searches variables appear incorrectly listed TYPE integer.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/integer_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integer Check — integer_check","text":"","code":"integer_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/integer_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integer Check — integer_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list variables may incorrectly labeled TYPE integer.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/integer_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integer Check — integer_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Names variables listed TYPE integer, appear integers).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/integer_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Integer Check — integer_check","text":"","code":"# Example 1: Fail check data(ExampleH) integer_check(DD.dict.H, DS.data.H) #> $Message #> [1] \"ERROR: some variables listed as TYPE integer do not appear to be integers.\" #>  #> $Information #> [1] \"SUP_SKF\" #>  print(integer_check(DD.dict.H, DS.data.H, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function      Status Message                       Infor…¹ #>   <dttm>              <chr>         <chr>  <chr>                         <named> #> 1 2023-01-18 11:48:29 integer_check Failed ERROR: some variables listed… <chr>   #> # … with abbreviated variable name ¹​Information  # Example 2: Pass check data(ExampleA) integer_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: all variables listed as TYPE integer appear to be integers.\" #>  print(integer_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function      Status Message                       Infor…¹ #>   <dttm>              <chr>         <chr>  <chr>                         <named> #> 1 2023-01-18 11:48:29 integer_check Passed Passed: all variables listed… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/label_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Label the data — label_data","title":"Label the data — label_data","text":"Using information data dictionary, function adds non-missing information data dictionary attributes data.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/label_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label the data — label_data","text":"","code":"label_data(DD.dict, DS.data, non.NA.missing.codes = NA)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/label_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label the data — label_data","text":"DD.dict Data dictionary. DS.data Data set. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/label_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label the data — label_data","text":"tibble containing labelled data set, data dictionary information embedded attributes variables labelled using Haven SPSS conventions.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/label_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label the data — label_data","text":"","code":"data(ExampleB) DS_labelled_data <- label_data(DD.dict.B, DS.data.B, non.NA.missing.codes=c(-9999)) labelled::var_label(DS_labelled_data$SEX) #> [1] \"Sex assigned at birth\" labelled::val_labels(DS_labelled_data$SEX) #>   male female  #>      0      1  attributes(DS_labelled_data$SEX) #> $labels #>   male female  #>      0      1  #>  #> $label #> [1] \"Sex assigned at birth\" #>  #> $class #> [1] \"haven_labelled\" \"vctrs_vctr\"     \"integer\"        #>  #> $TYPE #> [1] \"integer, encoded value\" #>  #> $MIN #> [1] 0 #>  #> $MAX #> [1] 1 #>  labelled::na_values(DS_labelled_data$HX_DEPRESSION) #> missing value  #>         -9999"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/minmax_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Mimimum and Maximum Values Check — minmax_check","title":"Mimimum and Maximum Values Check — minmax_check","text":"function flags variables values exceeding MIN MAX listed data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/minmax_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mimimum and Maximum Values Check — minmax_check","text":"","code":"minmax_check(DD.dict, DS.data, verbose = TRUE, non.NA.missing.codes = NA)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/minmax_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mimimum and Maximum Values Check — minmax_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list variables violate listed MIN MAX. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/minmax_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mimimum and Maximum Values Check — minmax_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (list variables exceed listed MIN MAX values).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/minmax_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mimimum and Maximum Values Check — minmax_check","text":"","code":"# Example 1 # Fail check (incorrectly flagging NA value codes -9999 # and -4444 as outside of the min max range) data(ExampleA) minmax_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait    Check ListedMin ListedMax OutOfRangeValues #>   <chr>    <lgl>     <dbl>     <dbl> <list>           #> 1 PREGNANT FALSE         0         1 <int [2]>        #>  # View out of range values: details <- minmax_check(DD.dict.A, DS.data.A)$Information #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait    Check ListedMin ListedMax OutOfRangeValues #>   <chr>    <lgl>     <dbl>     <dbl> <list>           #> 1 PREGNANT FALSE         0         1 <int [2]>        #>  details[[1]]$OutOfRangeValues #> [[1]] #> [1] -4444 -9999 #>  # Attempt 2, specifying -9999 and -4444 as missing value # codes so check works correctly minmax_check(DD.dict.A, DS.data.A, non.NA.missing.codes=c(-9999, -4444)) #> $Message #> [1] \"Passed: when provided, all variables are within the MIN to MAX range.\" #>   # Example 2 data(ExampleI) minmax_check(DD.dict.I, DS.data.I, non.NA.missing.codes=c(-9999, -4444)) #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait              Check ListedMin ListedMax OutOfRangeValues #>   <chr>              <lgl>     <dbl>     <dbl> <list>           #> 1 PERCEIVED_CONFLICT FALSE         1        15 <int [11]>       #>  # View out of range values: details <- minmax_check(DD.dict.I, DS.data.I, non.NA.missing.codes=c(-9999, -4444))$Information #> $Message #> [1] \"ERROR: some variables have values outside of the MIN to MAX range.\" #>  #> $Information #> # A tibble: 1 × 5 #>   Trait              Check ListedMin ListedMax OutOfRangeValues #>   <chr>              <lgl>     <dbl>     <dbl> <list>           #> 1 PERCEIVED_CONFLICT FALSE         1        15 <int [11]>       #>  details[[1]]$OutOfRangeValues #> [[1]] #>  [1] 25 24 16 28 17 21 30 19 26 20 29 #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/misc_format_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Miscellaneous Format Check — misc_format_check","title":"Miscellaneous Format Check — misc_format_check","text":"function checks miscellaneous dbGaP formatting requirements ensure (1) duplicate variable names; (2) variable names contain \"dbgap\"; (3) duplicate column names dictionary; (4) column names falling VALUES column unnamed.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/misc_format_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Miscellaneous Format Check — misc_format_check","text":"","code":"misc_format_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/misc_format_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Miscellaneous Format Check — misc_format_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well detailed information formatting checks failed.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/misc_format_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Miscellaneous Format Check — misc_format_check","text":"Tibble, returned invisibly, containing: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Names variables fail one checks).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/misc_format_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Miscellaneous Format Check — misc_format_check","text":"","code":"# Example 1: Fail check  data(ExampleJ) misc_format_check(DD.dict.J, DS.data.J) #> $Message #> [1] \"ERROR: at least one check failed.\" #>  #> $Information #> # A tibble: 4 × 4 #>   check.name check.description                           check.status details    #>   <chr>      <chr>                                       <chr>        <chr>      #> 1 Check 1    Duplicate variable name check               Passed       NA         #> 2 Check 2    Check for use of `dbgap` in variable names  Failed       HTN_dbGaP  #> 3 Check 2    Check for use of `dbgap` in variable names  Failed       PHYSICAL_… #> 4 Check 4    Column names after `VALUES` should be empty Passed       NA         #>  print(misc_format_check(DD.dict.J, DS.data.J, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function          Status Message                  Inform…¹ #>   <dttm>              <chr>             <chr>  <chr>                    <named > #> 1 2023-01-18 11:48:31 misc_format_check Failed ERROR: at least one che… <tibble> #> # … with abbreviated variable name ¹​Information  # Example 2: Pass check data(ExampleA) misc_format_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: no check-specific formatting issues identified.\" #>  #> $Information #> # A tibble: 3 × 4 #>   check.name check.description                           check.status details #>   <chr>      <chr>                                       <chr>        <chr>   #> 1 Check 1    Duplicate variable name check               Passed       NA      #> 2 Check 2    Check for use of `dbgap` in variable names  Passed       NA      #> 3 Check 4    Column names after `VALUES` should be empty Passed       NA      #>  print(misc_format_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function          Status Message                  Inform…¹ #>   <dttm>              <chr>             <chr>  <chr>                    <named > #> 1 2023-01-18 11:48:31 misc_format_check Passed Passed: no check-specif… <tibble> #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missing_value_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Value Check — missing_value_check","title":"Missing Value Check — missing_value_check","text":"function flags variables non-encoded missing value codes.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missing_value_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Value Check — missing_value_check","text":"","code":"missing_value_check(   DD.dict,   DS.data,   verbose = TRUE,   non.NA.missing.codes = NA )"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missing_value_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Value Check — missing_value_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list variables non-encoded missing values. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missing_value_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Value Check — missing_value_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (list variables missing value code properly encoded).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missing_value_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Value Check — missing_value_check","text":"","code":"data(ExampleB) missing_value_check(DD.dict.B, DS.data.B, non.NA.missing.codes = c(-9999,-4444)) #> $Message #> [1] \"ERROR: some variables have non-encoded missing value codes.\" #>  #> $Information #>     VARNAME VALUE MEANING  PASS #> 13 CUFFSIZE -9999    <NA> FALSE #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missingness_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Missingness Summary — missingness_summary","title":"Missingness Summary — missingness_summary","text":"awareness function summarizes amount missingness data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missingness_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missingness Summary — missingness_summary","text":"","code":"missingness_summary(DS.data, non.NA.missing.codes = NA, threshold = 95)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missingness_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missingness Summary — missingness_summary","text":"DS.data Data set. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999). threshold Threshold missingness concern (percent).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missingness_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missingness Summary — missingness_summary","text":"Tibble containing: (1) Message containing information number variables % missingness greater threshold; (2) Missingness variable summary; (3) Summary missingness variables missingness level greater threshold.","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/missingness_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missingness Summary — missingness_summary","text":"","code":"# Correct useage data(ExampleA) missingness_summary(DS.data.A, non.NA.missing.codes=c(-4444, -9999))  #> $Message #> [1] \"There are 0 variables with a percent missingness > 95% in your data set.\" #>  #> $threshold_summary #> [1] missing             percent_missingness #> <0 rows> (or 0-length row.names) #>  #> $full_missingness_summary #>                      missing percent_missingness #> LENGTH_SMOKING_YEARS      84                  84 #> PREGNANT                  53                  53 #> SAMPLE_ID                 16                  16 #> SMOKING_HX                 5                   5 #> PHYSICAL_ACTIVITY          4                   4 #> WEIGHT                     3                   3 #> BMI                        3                   3 #> OBESITY                    3                   3 #> ABD_CIRC                   3                   3 #> HIP_CIRC                   3                   3 #> ABD_SKF                    3                   3 #> SUP_SKF                    3                   3 #> RESIST                     3                   3 #> REACT                      3                   3 #> HX_DM                      3                   3 #> HX_STROKE                  3                   3 #> HEIGHT                     2                   2 #> CUFFSIZE                   2                   2 #> BP_SYSTOLIC                2                   2 #> BP_DIASTOLIC               2                   2 #> HTN                        2                   2 #> HX_ANXIETY                 2                   2 #> HX_DEPRESSION              2                   2 #> SUBJECT_ID                 0                   0 #> AGE                        0                   0 #> SEX                        0                   0 #> HEART_RATE                 0                   0 #> SOCIAL_SUPPORT             0                   0 #> PERCEIVED_CONFLICT         0                   0 #> PERCEIVED_HEALTH           0                   0 #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mm_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Min Max Required Pre-checks — mm_precheck","title":"Min Max Required Pre-checks — mm_precheck","text":"function runs workflow minimum number checks required user run minmax_check; checks include pkg_field_check, dimension_check, name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mm_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Min Max Required Pre-checks — mm_precheck","text":"","code":"mm_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mm_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Min Max Required Pre-checks — mm_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mm_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Min Max Required Pre-checks — mm_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mm_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Min Max Required Pre-checks — mm_precheck","text":"","code":"data(ExampleB) mm_precheck(DD.dict.B, DS.data.B) #> # A tibble: 3 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:31 pkg_field_check Passed Passed: package-level requ… <lgl>   #> 2 2023-01-18 11:48:31 dimension_check Passed Passed: the variable count… <int>   #> 3 2023-01-18 11:48:31 name_check      Passed Passed: the variable names… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mv_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Values Required Pre-checks — mv_precheck","title":"Missing Values Required Pre-checks — mv_precheck","text":"function runs workflow minimum number checks required user run missing_value_check; checks include field_check pkg_field_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mv_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Values Required Pre-checks — mv_precheck","text":"","code":"mv_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mv_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Values Required Pre-checks — mv_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mv_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Values Required Pre-checks — mv_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/mv_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Values Required Pre-checks — mv_precheck","text":"","code":"data(ExampleB) mv_precheck(DD.dict.B, DS.data.B) #> # A tibble: 3 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:31 field_check     Passed Passed: required fields VA… <lgl>   #> 2 2023-01-18 11:48:31 pkg_field_check Passed Passed: package-level requ… <lgl>   #> 3 2023-01-18 11:48:31 name_check      Passed Passed: the variable names… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Name Check — name_check","title":"Name Check — name_check","text":"function checks variable names match data dictionary data.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name Check — name_check","text":"","code":"name_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Name Check — name_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list non-matching variable names.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name Check — name_check","text":"Tibble, returned invisibly, containing: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Names variables mismatch data data dictionary).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Name Check — name_check","text":"","code":"# Example 1: Fail check (name mismatch) data(ExampleM) name_check(DD.dict.M, DS.data.M) #> $Message #> [1] \"ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.\" #>  #> $Information #> # A tibble: 2 × 2 #>   Data                Dict                  #>   <chr>               <chr>                 #> 1 Data: SMOKING_HX    Dict: SMOKING_HISTORY #> 2 Data: HX_DEPRESSION Dict: DEPRESSION_HX   #>  DS.data_updated <- name_correct(DD.dict.M, DS.data.M) #> $Message #> [1] \"CORRECTED ERROR: the variable names differ between the data dictionary and the data. **ALERT** Renaming variable(s) to match those listed in the data dictionary.\" #>  #> $Information #> # A tibble: 2 × 3 #>   Data                              Dict                             New.Data    #>   <chr>                             <chr>                            <chr>       #> 1 Original data name: SMOKING_HX    Dictionary name: SMOKING_HISTORY New data n… #> 2 Original data name: HX_DEPRESSION Dictionary name: DEPRESSION_HX   New data n… #>  name_check(DD.dict.M, DS.data_updated) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\" #>   # Example 2: Pass check data(ExampleA) name_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\" #>  print(name_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function   Status Message                          Infor…¹ #>   <dttm>              <chr>      <chr>  <chr>                            <named> #> 1 2023-01-18 11:48:32 name_check Passed Passed: the variable names matc… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":null,"dir":"Reference","previous_headings":"","what":"Name Correction Utility Function — name_correct","title":"Name Correction Utility Function — name_correct","text":"utility function updates data set variable names match listed data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name Correction Utility Function — name_correct","text":"","code":"name_correct(DD.dict, DS.data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Name Correction Utility Function — name_correct","text":"DD.dict Data dictionary. DS.data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name Correction Utility Function — name_correct","text":"Updated data set variables reordered match data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Name Correction Utility Function — name_correct","text":"Recommend use caution; perform name_check first.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_correct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Name Correction Utility Function — name_correct","text":"","code":"data(ExampleM) name_check(DD.dict.M, DS.data.M) #> $Message #> [1] \"ERROR: the variable names DO NOT match between the data dictionary and the data. If the intention behind the variable names is correct, consider using the name_correct function to automatically rename variables to match.\" #>  #> $Information #> # A tibble: 2 × 2 #>   Data                Dict                  #>   <chr>               <chr>                 #> 1 Data: SMOKING_HX    Dict: SMOKING_HISTORY #> 2 Data: HX_DEPRESSION Dict: DEPRESSION_HX   #>  DS.data_updated <- name_correct(DD.dict.M, DS.data.M) #> $Message #> [1] \"CORRECTED ERROR: the variable names differ between the data dictionary and the data. **ALERT** Renaming variable(s) to match those listed in the data dictionary.\" #>  #> $Information #> # A tibble: 2 × 3 #>   Data                              Dict                             New.Data    #>   <chr>                             <chr>                            <chr>       #> 1 Original data name: SMOKING_HX    Dictionary name: SMOKING_HISTORY New data n… #> 2 Original data name: HX_DEPRESSION Dictionary name: DEPRESSION_HX   New data n… #>  name_check(DD.dict.M, DS.data_updated) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\" #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Name Pre-checks — name_precheck","title":"Name Pre-checks — name_precheck","text":"function runs workflow minimum number checks required user run minmax_check; checks include pkg_field_check, dimension_check, name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name Pre-checks — name_precheck","text":"","code":"name_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Name Pre-checks — name_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name Pre-checks — name_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/name_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Name Pre-checks — name_precheck","text":"","code":"data(ExampleB) name_precheck(DD.dict.B, DS.data.B) #> # A tibble: 2 × 5 #>   Time                Function          Status Message                   Infor…¹ #>   <dttm>              <chr>             <chr>  <chr>                     <named> #> 1 2023-01-18 11:48:32 short_field_check Passed Passed: required fields … <lgl>   #> 2 2023-01-18 11:48:32 dimension_check   Passed Passed: the variable cou… <int>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Package Required Field Check — pkg_field_check","title":"Package Required Field Check — pkg_field_check","text":"function checks additional fields required package including variable type (TYPE), minimum value (MIN), maximum value (MAX).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package Required Field Check — pkg_field_check","text":"","code":"pkg_field_check(DD.dict, DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package Required Field Check — pkg_field_check","text":"DD.dict Data dictionary. DS.data Data set. verbose TRUE, function prints Message , well list fields found data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package Required Field Check — pkg_field_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Named vector TRUE/FALSE values alerting user checks passed (TRUE) failed (FALSE) TYPE, MIN, MAX).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Package Required Field Check — pkg_field_check","text":"Even though MIN, MAX, TYPE required dbGaP, package created use variables series checks awareness functions (e.g., render_report, values_check, etc.). function fails, add_missing_fields function can used.","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/pkg_field_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Package Required Field Check — pkg_field_check","text":"","code":"# Example 1: Fail check data(ExampleD) pkg_field_check(DD.dict.D, DS.data.D) #> $Message #> [1] \"ERROR: not all package-level required fields are present in the data dictionary. Consider using the add_missing_fields function to auto fill these fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\"  #>  # Use the add_missing_fields function to add in data DD.dict.updated <- add_missing_fields(DD.dict.D, DS.data.D) #> $Message #> [1] \"CORRECTED ERROR: not all package-level required fields were present in the data dictionary. The missing fields have now been added! TYPE was inferred from the data, and MIN/MAX have been added as empty fields.\" #>  #> $Missing #> [1] \"TYPE\" \"MIN\"  \"MAX\"  #>  # Be sure to call in the new version of the dictionary (DD.dict.updated) pkg_field_check(DD.dict.updated, DS.data.D)  #> $Message #> [1] \"Passed: package-level required fields TYPE, MIN, and MAX present in the data dictionary.\" #>   # Example 2: Pass check data(ExampleA) pkg_field_check(DD.dict.A, DS.data.A) #> $Message #> [1] \"Passed: package-level required fields TYPE, MIN, and MAX present in the data dictionary.\" #>  print(pkg_field_check(DD.dict.A, DS.data.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:32 pkg_field_check Passed Passed: package-level requ… <lgl>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Data Set Utility Function — reorder_data","title":"Reorder Data Set Utility Function — reorder_data","text":"utility function reorders data set match data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Data Set Utility Function — reorder_data","text":"","code":"reorder_data(DD.dict, DS.data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Data Set Utility Function — reorder_data","text":"DD.dict Data dictionary. DS.data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder Data Set Utility Function — reorder_data","text":"Updated data set variables reordered match data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Data Set Utility Function — reorder_data","text":"","code":"data(ExampleN) name_check(DD.dict.N, DS.data.N) #> $Message #> [1] \"ERROR: the variable names match between the data dictionary and the data, but they are in the wrong order. Consider using reorder_dictionary function to automatically reorder the dictionary so that you can continue working through the checks.\" #>  #> $Information #> # A tibble: 10 × 2 #>    Data                       Dict                       #>    <chr>                      <chr>                      #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             #>  2 Data: HIP_CIRC             Dict: ABD_SKF              #>  3 Data: ABD_SKF              Dict: SUP_SKF              #>  4 Data: SUP_SKF              Dict: ABD_CIRC             #>  5 Data: BP_DIASTOLIC         Dict: HTN                  #>  6 Data: HTN                  Dict: SMOKING_HX           #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         #>  DS.data_updated <- reorder_data(DD.dict.N, DS.data.N) #> $Message #> [1] \"CORRECTED ERROR: the variable names match between the data dictionary and the data, but they were in the wrong order. ***ALERT**** this function has temporarily reordered the dictionary to match the data so that you can continue working through the checks.\" #>  #> $Information #> # A tibble: 10 × 3 #>    Data                       Dict                       New.Data                #>    <chr>                      <chr>                      <chr>                   #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             Dict: HIP_CIRC          #>  2 Data: HIP_CIRC             Dict: ABD_SKF              Dict: ABD_SKF           #>  3 Data: ABD_SKF              Dict: SUP_SKF              Dict: SUP_SKF           #>  4 Data: SUP_SKF              Dict: ABD_CIRC             Dict: ABD_CIRC          #>  5 Data: BP_DIASTOLIC         Dict: HTN                  Dict: HTN               #>  6 Data: HTN                  Dict: SMOKING_HX           Dict: SMOKING_HX        #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS Dict: LENGTH_SMOKING_Y… #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           Dict: HEART_RATE        #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    Dict: PHYSICAL_ACTIVITY #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         Dict: BP_DIASTOLIC      #>  name_check(DD.dict.N, DS.data_updated) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\" #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder Data Dictionary Utility Function — reorder_dictionary","title":"Reorder Data Dictionary Utility Function — reorder_dictionary","text":"utility function reorders data dictionary match data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_dictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder Data Dictionary Utility Function — reorder_dictionary","text":"","code":"reorder_dictionary(DD.dict, DS.data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder Data Dictionary Utility Function — reorder_dictionary","text":"DD.dict Data dictionary. DS.data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_dictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder Data Dictionary Utility Function — reorder_dictionary","text":"Updated data dictionary variables reordered match data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/reorder_dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reorder Data Dictionary Utility Function — reorder_dictionary","text":"","code":"data(ExampleN) name_check(DD.dict.N, DS.data.N) #> $Message #> [1] \"ERROR: the variable names match between the data dictionary and the data, but they are in the wrong order. Consider using reorder_dictionary function to automatically reorder the dictionary so that you can continue working through the checks.\" #>  #> $Information #> # A tibble: 10 × 2 #>    Data                       Dict                       #>    <chr>                      <chr>                      #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             #>  2 Data: HIP_CIRC             Dict: ABD_SKF              #>  3 Data: ABD_SKF              Dict: SUP_SKF              #>  4 Data: SUP_SKF              Dict: ABD_CIRC             #>  5 Data: BP_DIASTOLIC         Dict: HTN                  #>  6 Data: HTN                  Dict: SMOKING_HX           #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         #>  DD.dict_updated <- reorder_dictionary(DD.dict.N, DS.data.N) #> $Message #> [1] \"CORRECTED ERROR: the variable names match between the data dictionary and the data, but they were in the wrong order. ***ALERT**** this function has temporarily reordered the dictionary to match the data so that you can continue working through the checks.\" #>  #> $Information #> # A tibble: 10 × 3 #>    Data                       Dict                       New.Dict                #>    <chr>                      <chr>                      <chr>                   #>  1 Data: ABD_CIRC             Dict: HIP_CIRC             Data: ABD_CIRC          #>  2 Data: HIP_CIRC             Dict: ABD_SKF              Data: HIP_CIRC          #>  3 Data: ABD_SKF              Dict: SUP_SKF              Data: ABD_SKF           #>  4 Data: SUP_SKF              Dict: ABD_CIRC             Data: SUP_SKF           #>  5 Data: BP_DIASTOLIC         Dict: HTN                  Data: BP_DIASTOLIC      #>  6 Data: HTN                  Dict: SMOKING_HX           Data: HTN               #>  7 Data: SMOKING_HX           Dict: LENGTH_SMOKING_YEARS Data: SMOKING_HX        #>  8 Data: LENGTH_SMOKING_YEARS Dict: HEART_RATE           Data: LENGTH_SMOKING_Y… #>  9 Data: HEART_RATE           Dict: PHYSICAL_ACTIVITY    Data: HEART_RATE        #> 10 Data: PHYSICAL_ACTIVITY    Dict: BP_DIASTOLIC         Data: PHYSICAL_ACTIVITY #>  name_check(DD.dict_updated, DS.data.N) #> $Message #> [1] \"Passed: the variable names match between the data dictionary and the data.\" #>  #> $Information #> [1] \"Variable names matched\" #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/row_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Row Check — row_check","title":"Row Check — row_check","text":"function checks empty duplicate rows data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/row_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Row Check — row_check","text":"","code":"row_check(DS.data, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/row_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Row Check — row_check","text":"DS.data Data set. verbose TRUE, function prints Message , well row numbers problematic rows.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/row_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Row Check — row_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (list problematic row participant ID numbers).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/row_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Row Check — row_check","text":"","code":"# Example 1: Fail check data(ExampleK) row_check(DS.data.K) #> $Message #> [1] \"ERROR: blank and duplicate rows detected.\" #>  #> $Information #> $Information$empty_row_numbers #> [1] \"102\" #>  #> $Information$duplicated_row_numbers #> [1] \"7\"  \"19\" #>  #> $Information$duplicated_SUBJECT_ID #> [1]  6 17 #>  #>  print(row_check(DS.data.K, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function  Status Message                      Information  #>   <dttm>              <chr>     <chr>  <chr>                        <named list> #> 1 2023-01-18 11:48:33 row_check Failed ERROR: blank and duplicate … <named list>  # Example 2: Pass check data(ExampleC) row_check(DS.data.C) #> $Message #> [1] \"Passed: no blank or duplicate rows detected.\" #>  print(row_check(DS.data.C, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function  Status Message                      Information  #>   <dttm>              <chr>     <chr>  <chr>                        <named list> #> 1 2023-01-18 11:48:33 row_check Passed Passed: no blank or duplica… <named list>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_field_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated Field Check — short_field_check","title":"Truncated Field Check — short_field_check","text":"function checks dbGaP required fields variable name (VARNAME), variable description (VARDESC) pre-check embedded name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_field_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated Field Check — short_field_check","text":"","code":"short_field_check(DD.dict, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_field_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated Field Check — short_field_check","text":"DD.dict Data dictionary. verbose TRUE, function prints Message , well list fields found data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_field_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated Field Check — short_field_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Named vector TRUE/FALSE values alerting user checks passed (TRUE) failed (FALSE) VARNAME, VARDESC, UNITS, VALUE).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_field_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated Field Check — short_field_check","text":"","code":"data(ExampleA) short_field_check(DD.dict.A) #> $Message #> [1] \"Passed: required fields VARNAME and VARDESC present in the data dictionary.\" #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated Pre-check — short_precheck","title":"Truncated Pre-check — short_precheck","text":"function runs workflow minimum number checks required user run dbGaPCheckup_required_field_check; checks include dbGaP_required_field_check, dimension_check, name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated Pre-check — short_precheck","text":"","code":"short_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated Pre-check — short_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated Pre-check — short_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/short_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated Pre-check — short_precheck","text":"","code":"data(ExampleB) short_precheck(DD.dict.B, DS.data.B) #> # A tibble: 3 × 5 #>   Time                Function        Status Message                     Infor…¹ #>   <dttm>              <chr>           <chr>  <chr>                       <named> #> 1 2023-01-18 11:48:33 field_check     Passed Passed: required fields VA… <lgl>   #> 2 2023-01-18 11:48:33 dimension_check Passed Passed: the variable count… <int>   #> 3 2023-01-18 11:48:33 name_check      Passed Passed: the variable names… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/super_short_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Very Truncated Pre-check — super_short_precheck","title":"Very Truncated Pre-check — super_short_precheck","text":"function runs workflow minimum number checks required user run dbGaPCheckup_required_field_check; checks include dbGaP_required_field_check, dimension_check, name_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/super_short_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Very Truncated Pre-check — super_short_precheck","text":"","code":"super_short_precheck(dict, data)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/super_short_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Very Truncated Pre-check — super_short_precheck","text":"dict Data dictionary. data Data set.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/super_short_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Very Truncated Pre-check — super_short_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/super_short_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Very Truncated Pre-check — super_short_precheck","text":"","code":"# Example 1: Pass check data(ExampleB) super_short_precheck(DD.dict.B, DS.data.B) #> # A tibble: 1 × 5 #>   Time                Function    Status Message                         Infor…¹ #>   <dttm>              <chr>       <chr>  <chr>                           <named> #> 1 2023-01-18 11:48:33 field_check Passed Passed: required fields VARNAM… <lgl>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Type Check — type_check","title":"Type Check — type_check","text":"TYPE field exists, function checks TYPE entries allowable per dbGaP instructions.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type Check — type_check","text":"","code":"type_check(DD.dict, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type Check — type_check","text":"DD.dict Data dictionary. verbose TRUE, function prints Message , well detailed diagnostic information.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type Check — type_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (List illegal TYPE entries).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Type Check — type_check","text":"Allowable entries TYPE column include: integer; decimal; encoded value; string. mixed values, list types present using commas separate (e.g., integer, encoded value).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/type_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type Check — type_check","text":"","code":"data(ExampleB) type_check(DD.dict.B) #> $Message #> [1] \"Passed: All TYPE entries found are accepted by dbGaP per submission instructions.\" #>  #> $Information #> [1] \"integer\"                \"integer, encoded value\" \"decimal, encoded value\" #>  print(type_check(DD.dict.B, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function   Status Message                          Infor…¹ #>   <dttm>              <chr>      <chr>  <chr>                            <named> #> 1 2023-01-18 11:48:33 type_check Passed Passed: All TYPE entries found … <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_meaning_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Value-Meaning Table — value_meaning_table","title":"Value-Meaning Table — value_meaning_table","text":"function generates value-meaning table parsing VALUES fields.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_meaning_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value-Meaning Table — value_meaning_table","text":"","code":"value_meaning_table(DD.dict)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_meaning_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value-Meaning Table — value_meaning_table","text":"DD.dict Data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_meaning_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value-Meaning Table — value_meaning_table","text":"data frame columns VARNAME, TYPE, VALUE, MEANING.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_meaning_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value-Meaning Table — value_meaning_table","text":"","code":"data(ExampleB) head(value_meaning_table(DD.dict.B)) #>     VARNAME                   TYPE VALUE       MEANING #> 2 SAMPLE_ID integer, encoded value -9999 missing value #> 3       SEX integer, encoded value     0          male #> 4       SEX integer, encoded value     1        female #> 5    HEIGHT decimal, encoded value -9999 missing value #> 6    WEIGHT decimal, encoded value -9999 missing value #> 7       BMI decimal, encoded value -9999 missing value"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Values Missing Table Awareness Function — value_missing_table","title":"Values Missing Table Awareness Function — value_missing_table","text":"function checks consistent usage encoded values missing value codes data dictionary data .","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values Missing Table Awareness Function — value_missing_table","text":"","code":"value_missing_table(DD.dict, DS.data, non.NA.missing.codes = NA)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Values Missing Table Awareness Function — value_missing_table","text":"DD.dict Data dictionary. DS.data Data set. non.NA.missing.codes user-defined vector numerical missing value codes (e.g., -9999).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Values Missing Table Awareness Function — value_missing_table","text":"list, returned invisibly,two components: \"report\"Tibble containing: (1) Name (Name function) (2) Information (Details potential flagged variables). \"tb\"Tibble detailed information used construct Information.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Values Missing Table Awareness Function — value_missing_table","text":"variable, three sets possible values: set D unique values observed data, set V values explicitly encoded VALUES columns data dictionary, set M missing value codes defined user via non.NA.missing.codes argument. function examines various intersections three sets, providing awareness checks user possible issues concern.  ideally defined values set V observed data (e.g., set D), necessarily error one . function checks : () Set M Set D: user defines missing value code present data. (B) Set V Set D: VALUES entry defines encoded code value, code value present data. (C) Set M Set V: user defines missing value code defined VALUES entry. (D) M Set D Set V: defined global missing value code present data given variable, variable corresponding VALUES entry. (E) (Set V values Set M) Set D = (Set V M) D: VALUES entry defined missing value code detected data.","code":""},{"path":[]},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/value_missing_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Values Missing Table Awareness Function — value_missing_table","text":"","code":"data(ExampleB) value_missing_table(DD.dict.B, DS.data.B, non.NA.missing.codes = c(-9999)) #> $Message #> [1] \"Flag: at least one check flagged.\" #>  #> $Information #> # A tibble: 7 × 4 #>   check.name                     check.description              check…¹ details  #>   <chr>                          <chr>                          <chr>   <named > #> 1 Check A: In M, Not in D        \"All missing value codes are … Flag    <tibble> #> 2 Check B: In V, Not in D        \"All value codes are in the d… Flag    <tibble> #> 3 Check C: In M, Not in V        \"All missing value codes are … Flag    <tibble> #> 4 Check D: In M & in D, not in V \"All missing value codes are … Flag    <tibble> #> 5 Check E: V NOT in M, NOT in D  \"All value codes no defined a… Passed  <chr>    #> 6 Awareness: NsetD vs. NsetV     \"Size of Set D vs size of set… Info    <tibble> #> 7 Awareness: N_DnotM vs. N_VnotM \"Size of Set D\\\\M vs size of … Info    <tibble> #> # … with abbreviated variable name ¹​check.status #>  print(value_missing_table(DD.dict.B, DS.data.B, non.NA.missing.codes = c(-9999))) #> $Message #> [1] \"Flag: at least one check flagged.\" #>  #> $Information #> # A tibble: 7 × 4 #>   check.name                     check.description              check…¹ details  #>   <chr>                          <chr>                          <chr>   <named > #> 1 Check A: In M, Not in D        \"All missing value codes are … Flag    <tibble> #> 2 Check B: In V, Not in D        \"All value codes are in the d… Flag    <tibble> #> 3 Check C: In M, Not in V        \"All missing value codes are … Flag    <tibble> #> 4 Check D: In M & in D, not in V \"All missing value codes are … Flag    <tibble> #> 5 Check E: V NOT in M, NOT in D  \"All value codes no defined a… Passed  <chr>    #> 6 Awareness: NsetD vs. NsetV     \"Size of Set D vs size of set… Info    <tibble> #> 7 Awareness: N_DnotM vs. N_VnotM \"Size of Set D\\\\M vs size of … Info    <tibble> #> # … with abbreviated variable name ¹​check.status #>  #> $report #> # A tibble: 7 × 2 #>   Function            Information$check.name         $check.d…¹ $chec…² $details #>   <chr>               <chr>                          <chr>      <chr>   <named > #> 1 value_missing_table Check A: In M, Not in D        \"All miss… Flag    <tibble> #> 2 value_missing_table Check B: In V, Not in D        \"All valu… Flag    <tibble> #> 3 value_missing_table Check C: In M, Not in V        \"All miss… Flag    <tibble> #> 4 value_missing_table Check D: In M & in D, not in V \"All miss… Flag    <tibble> #> 5 value_missing_table Check E: V NOT in M, NOT in D  \"All valu… Passed  <chr>    #> 6 value_missing_table Awareness: NsetD vs. NsetV     \"Size of … Info    <tibble> #> 7 value_missing_table Awareness: N_DnotM vs. N_VnotM \"Size of … Info    <tibble> #> # … with abbreviated variable names ¹​$check.description, ²​$check.status #>  #> $tb #> # A tibble: 52 × 35 #>    VARNAME   TYPE      VALUE MEANING VInD  NumUn…¹ AllMInD AnyMInD MInD  MNotInD #>    <chr>     <chr>     <chr> <chr>   <lgl>   <int> <lgl>   <lgl>   <lis> <list>  #>  1 SAMPLE_ID integer,… -9999 missin… TRUE       85 TRUE    TRUE    <dbl> <chr>   #>  2 SEX       integer,… 0     male    TRUE        2 FALSE   FALSE   <chr> <dbl>   #>  3 SEX       integer,… 1     female  TRUE        2 FALSE   FALSE   <chr> <dbl>   #>  4 HEIGHT    decimal,… -9999 missin… TRUE       96 TRUE    TRUE    <dbl> <chr>   #>  5 WEIGHT    decimal,… -9999 missin… TRUE       77 TRUE    TRUE    <dbl> <chr>   #>  6 BMI       decimal,… -9999 missin… TRUE       98 TRUE    TRUE    <dbl> <chr>   #>  7 OBESITY   integer,… 0     no      TRUE        3 TRUE    TRUE    <dbl> <chr>   #>  8 OBESITY   integer,… 1     yes     TRUE        3 TRUE    TRUE    <dbl> <chr>   #>  9 OBESITY   integer,… -9999 missin… TRUE        3 TRUE    TRUE    <dbl> <chr>   #> 10 ABD_CIRC  decimal,… -9999 missin… TRUE       70 TRUE    TRUE    <dbl> <chr>   #> # … with 42 more rows, 25 more variables: AllVsInD <lgl>, VsNotInD <list>, #> #   AllDefVsInMInD <lgl>, DefVsInMNotInD <list>, AllSetMInSetV <lgl>, #> #   SetMsNotInSetV <list>, All_MInSetD_InSetV <lgl>, setMInDNotInV <list>, #> #   All_VNotInM_NotInD <lgl>, setVNotInM_NotInD <chr>, NsetD <int>, #> #   NsetM <int>, NsetV <int>, NsetDAndSetV <int>, NsetMAndSetV <int>, #> #   NsetDAndSetM <int>, setV <list>, setD <list>, setM <list>, setDnotM <list>, #> #   setVnotM <list>, N_DnotM <int>, N_VnotM <int>, DnotM_eq_VnotM <lgl>, … #>  results <- value_missing_table(DD.dict.B, DS.data.B, non.NA.missing.codes = c(-9999)) #> $Message #> [1] \"Flag: at least one check flagged.\" #>  #> $Information #> # A tibble: 7 × 4 #>   check.name                     check.description              check…¹ details  #>   <chr>                          <chr>                          <chr>   <named > #> 1 Check A: In M, Not in D        \"All missing value codes are … Flag    <tibble> #> 2 Check B: In V, Not in D        \"All value codes are in the d… Flag    <tibble> #> 3 Check C: In M, Not in V        \"All missing value codes are … Flag    <tibble> #> 4 Check D: In M & in D, not in V \"All missing value codes are … Flag    <tibble> #> 5 Check E: V NOT in M, NOT in D  \"All value codes no defined a… Passed  <chr>    #> 6 Awareness: NsetD vs. NsetV     \"Size of Set D vs size of set… Info    <tibble> #> 7 Awareness: N_DnotM vs. N_VnotM \"Size of Set D\\\\M vs size of … Info    <tibble> #> # … with abbreviated variable name ¹​check.status #>  results$report$Information$details #> $CheckA.AllMInD #> # A tibble: 6 × 7 #>   VARNAME              AllMInD NsetD NsetM NsetDAndSetM MNotInD   MInD      #>   <chr>                <lgl>   <int> <int>        <int> <list>    <list>    #> 1 SEX                  FALSE       2     1            0 <dbl [1]> <chr [1]> #> 2 LENGTH_SMOKING_YEARS FALSE      12     1            0 <dbl [1]> <chr [1]> #> 3 HEART_RATE           FALSE      44     1            0 <dbl [1]> <chr [1]> #> 4 SOCIAL_SUPPORT       FALSE       5     1            0 <dbl [1]> <chr [1]> #> 5 PERCEIVED_CONFLICT   FALSE      24     1            0 <dbl [1]> <chr [1]> #> 6 PERCEIVED_HEALTH     FALSE      10     1            0 <dbl [1]> <chr [1]> #>  #> $CheckB.AllVsInD #> # A tibble: 2 × 6 #>   VARNAME              AllVsInD NsetD NsetV NsetDAndSetV VsNotInD  #>   <chr>                <lgl>    <int> <int>        <int> <list>    #> 1 LENGTH_SMOKING_YEARS FALSE       12     2            1 <chr [1]> #> 2 HEART_RATE           FALSE       44     1            0 <chr [1]> #>  #> $CheckC.AllSetMInSetV #> # A tibble: 5 × 6 #>   VARNAME            AllSetMInSetV NsetV NsetM NsetMAndSetV SetMsNotInSetV #>   <chr>              <lgl>         <int> <int>        <int> <list>         #> 1 SEX                FALSE             2     1            0 <dbl [1]>      #> 2 CUFFSIZE           FALSE             4     1            0 <dbl [1]>      #> 3 SOCIAL_SUPPORT     FALSE             5     1            0 <dbl [1]>      #> 4 PERCEIVED_CONFLICT FALSE             2     1            0 <dbl [1]>      #> 5 PERCEIVED_HEALTH   FALSE             2     1            0 <dbl [1]>      #>  #> $CheckD.All_MInSetD_InSetV #> # A tibble: 1 × 3 #>   VARNAME  All_MInSetD_InSetV setMInDNotInV #>   <chr>    <lgl>              <list>        #> 1 CUFFSIZE FALSE              <dbl [1]>     #>  #> $CheckE.All_VNotInM_NotInD #> [1] \"Passed\" #>  #> $countTable.DvsV #> # A tibble: 18 × 5 #>    VARNAME              NsetD NsetV NsetDAndSetV Ndiff #>    <chr>                <int> <int>        <int> <int> #>  1 CUFFSIZE                 5     4            4     1 #>  2 PERCEIVED_HEALTH        10     2            2     8 #>  3 LENGTH_SMOKING_YEARS    12     2            1    10 #>  4 BP_DIASTOLIC            15     1            1    14 #>  5 PHYSICAL_ACTIVITY       22     1            1    21 #>  6 PERCEIVED_CONFLICT      24     2            2    22 #>  7 SUP_SKF                 24     1            1    23 #>  8 REACT                   25     1            1    24 #>  9 BP_SYSTOLIC             26     1            1    25 #> 10 ABD_SKF                 29     1            1    28 #> 11 RESIST                  36     1            1    35 #> 12 HEART_RATE              44     1            0    43 #> 13 HIP_CIRC                67     1            1    66 #> 14 ABD_CIRC                70     1            1    69 #> 15 WEIGHT                  77     1            1    76 #> 16 SAMPLE_ID               85     1            1    84 #> 17 HEIGHT                  96     1            1    95 #> 18 BMI                     98     1            1    97 #>  #> $countTable.DnotMvsVnotM #> # A tibble: 17 × 6 #>    VARNAME              DnotM_sub_VnotM DnotM_eq_VnotM N_DnotM N_VnotM Ndiff #>    <chr>                <lgl>           <lgl>            <int>   <int> <int> #>  1 PERCEIVED_HEALTH     FALSE           FALSE               10       2     8 #>  2 LENGTH_SMOKING_YEARS FALSE           FALSE               12       1    11 #>  3 BP_DIASTOLIC         FALSE           FALSE               14       0    14 #>  4 PHYSICAL_ACTIVITY    FALSE           FALSE               21       0    21 #>  5 SUP_SKF              FALSE           FALSE               23       0    23 #>  6 PERCEIVED_CONFLICT   FALSE           FALSE               24       2    22 #>  7 REACT                FALSE           FALSE               24       0    24 #>  8 BP_SYSTOLIC          FALSE           FALSE               25       0    25 #>  9 ABD_SKF              FALSE           FALSE               28       0    28 #> 10 RESIST               FALSE           FALSE               35       0    35 #> 11 HEART_RATE           FALSE           FALSE               44       0    44 #> 12 HIP_CIRC             FALSE           FALSE               66       0    66 #> 13 ABD_CIRC             FALSE           FALSE               69       0    69 #> 14 WEIGHT               FALSE           FALSE               76       0    76 #> 15 SAMPLE_ID            FALSE           FALSE               84       0    84 #> 16 HEIGHT               FALSE           FALSE               95       0    95 #> 17 BMI                  FALSE           FALSE               97       0    97 #>"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Values Check — values_check","title":"Values Check — values_check","text":"function checks potential errors VALUES columns ensuring (1) required format VALUE=MEANING (e.g., 0=Yes 1=); (2) leading/trailing spaces near equals sign; (3) variables TYPE encoded VALUES entries; (4) variables VALUES entries listed TYPE encoded.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values Check — values_check","text":"","code":"values_check(DD.dict, verbose = TRUE)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Values Check — values_check","text":"DD.dict Data dictionary. verbose TRUE, function prints Message , well list variables fail one values checks.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Values Check — values_check","text":"Tibble, returned invisibly, containing: (1) Time (Time stamp); (2) Name (Name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (Details checks passed/failed value=meaning instances).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Values Check — values_check","text":"","code":"# Example 1: Fail check data(ExampleE) values_check(DD.dict.E) #> $Message #> [1] \"ERROR: at least one VALUES check flagged potentials issues. See Information for more details.\" #>  #> $Information #>    column_name values.check            vname                   type #> 4      VALUES3        FALSE         CUFFSIZE integer, encoded value #> 6       VALUES        FALSE              HTN integer, encoded value #> 7       VALUES        FALSE PERCEIVED_HEALTH integer, encoded value #> 9      VALUES5        FALSE               28 integer, encoded value #> 10     VALUES4        FALSE               28 integer, encoded value #> 12     VALUES2        FALSE               16 integer, encoded value #> 14      VALUES        FALSE           RESIST integer, encoded value #> 15      VALUES        FALSE        SAMPLE_ID                integer #> 16      VALUES        FALSE              SEX                integer #>                                                   problematic_description #> 4                                                           2 means large #> 6                                                          0 indicates no #> 7  Between 1 and 10 with higher values indicating better perceived health #> 9                                                        5 = a great deal #> 10                                                        4 = quite a bit #> 12                                                              1 =medium #> 14                                                                   <NA> #> 15                                                    -9999=missing value #> 16                                                                 0=male #>                                                                         check #> 4                  Check 1: Is an equals sign present for all values columns? #> 6                  Check 1: Is an equals sign present for all values columns? #> 7                  Check 1: Is an equals sign present for all values columns? #> 9  Check 2: Are there any leading/trailing spaces near the first equals sign? #> 10 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 12 Check 2: Are there any leading/trailing spaces near the first equals sign? #> 14  Check 3: Do all variables of TYPE encoded have at least one VALUES entry? #> 15            Check 4: Are all variables with VALUES entries of TYPE encoded? #> 16            Check 4: Are all variables with VALUES entries of TYPE encoded? #>  print(values_check(DD.dict.E, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function     Status Message                        Infor…¹ #>   <dttm>              <chr>        <chr>  <chr>                          <named> #> 1 2023-01-18 11:48:35 values_check Failed ERROR: at least one VALUES ch… <df>    #> # … with abbreviated variable name ¹​Information  # Example 2: Pass check data(ExampleA) values_check(DD.dict.A) #> $Message #> [1] \"Passed: all four VALUES checks look good.\" #>  #> $Information #>   check.name                                                 check.description #> 1    Check 1                 Is an equals sign present for all values columns? #> 2    Check 2 Are there any leading/trailing spaces near the first equals sign? #> 3    Check 3  Do all variables of TYPE encoded have at least one VALUES entry? #> 4    Check 4            Are all variables with VALUES entries of TYPE encoded? #>   check.status #> 1       Passed #> 2       Passed #> 3       Passed #> 4       Passed #>  print(values_check(DD.dict.A, verbose=FALSE)) #> # A tibble: 1 × 5 #>   Time                Function     Status Message                        Infor…¹ #>   <dttm>              <chr>        <chr>  <chr>                          <named> #> 1 2023-01-18 11:48:35 values_check Passed Passed: all four VALUES check… <df>    #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_precheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Values Pre-Check — values_precheck","title":"Values Pre-Check — values_precheck","text":"function runs workflow minimum number checks required user run values_check; checks include field_check, type_check.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_precheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Values Pre-Check — values_precheck","text":"","code":"values_precheck(dict)"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_precheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Values Pre-Check — values_precheck","text":"dict Data dictionary.","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_precheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Values Pre-Check — values_precheck","text":"Tibble containing following information check: (1) Time (time stamp); (2) Name (name function); (3) Status (Passed/Failed); (4) Message (copy message function printed ); (5) Information (detailed information potential errors identified).","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/reference/values_precheck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Values Pre-Check — values_precheck","text":"","code":"data(ExampleB) values_precheck(DD.dict.B) #> # A tibble: 2 × 5 #>   Time                Function    Status Message                         Infor…¹ #>   <dttm>              <chr>       <chr>  <chr>                           <named> #> 1 2023-01-18 11:48:35 field_check Passed Passed: required fields VARNAM… <lgl>   #> 2 2023-01-18 11:48:35 type_check  Passed Passed: All TYPE entries found… <chr>   #> # … with abbreviated variable name ¹​Information"},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/news/index.html","id":"dbgapcheckup-version-101","dir":"Changelog","previous_headings":"","what":"dbGaPCheckup version 1.0.1","title":"dbGaPCheckup version 1.0.1","text":"CRAN release: 2022-12-22 apply na_if() one column time (vs. entire data frame ) maintain compatibility next version dplyr","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/news/index.html","id":"dbgapcheckup-version-100","dir":"Changelog","previous_headings":"","what":"dbGaPCheckup version 1.0.0","title":"dbGaPCheckup version 1.0.0","text":"CRAN release: 2022-11-14","code":""},{"path":"https://lwheinsberg.github.io/dbGaPCheckup/news/index.html","id":"newsmd-setup-1-0-0","dir":"Changelog","previous_headings":"","what":"NEWS.md setup","title":"dbGaPCheckup version 1.0.0","text":"added NEWS.md","code":""}]
